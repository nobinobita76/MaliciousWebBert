<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head> 
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
  <title>Spring常用配置</title> 
  <meta name="keywords" content="Spring常用配置,MagicSite" /> 
  <meta name="description" content="Spring常用配置,MagicSite" /> 
  <meta http-equiv="pragma" content="no-cache" /> 
  <meta http-equiv="cache-control" content="no-cache" /> 
  <meta http-equiv="expires" content="0" /> 
  <meta http-equiv="keywords" content="" /> 
  <meta http-equiv="description" content="" /> 
  <link rel="stylesheet" type="text/css" href="/css/a.css" /> 
  <script type="text/javascript" src="/scripts/a.js"></script> 
  <script type="text/javascript" src="/scripts/b.js"></script> 
  <style>
a {
	TEXT-DECORATION: none
}

a:hover {
	TEXT-DECORATION: underline
}
</style> 
 </head> 
 <body> 
  <div id="main"> 
   <div id="header"> 
    <div id="logo_1"> 
     <script src="/js/head-logo.js" type="text/javascript"></script> 
    </div> 
    <div id="logo_head_ad"> 
     <script src="/adjs/adhead1.js" type="text/javascript"></script> 
    </div> 
   </div> 
   <div class="search_space"> 
    <script src="/adjs/search.js" type="text/javascript"></script> 
   </div> 
   <div id="nav"> 
    <div id="left1"> 
     <script src="/adjs/adleft1.js" type="text/javascript"></script> 
    </div> 
    <div id="left2"> 
     <script src="/adjs/adleft2.js" type="text/javascript"></script> 
    </div> 
    <div id="left3"> 
     <script src="/adjs/adleft3.js" type="text/javascript"></script> 
    </div> 
    <div id="left4"> 
     <script src="/adjs/adleft4.js" type="text/javascript"></script> 
    </div> 
    <div id="left5"> 
     <script src="/adjs/adleft5.js" type="text/javascript"></script> 
    </div> 
   </div> 
   <div id="section"> 
    <div id="headAd"> 
     <script src="/adjs/adhead2.js" type="text/javascript"></script> 
    </div> 
    <div id="headAd1"> 
     <script src="/adjs/adhead3.js" type="text/javascript"></script> 
    </div> 
    <div class="space"> 
     <script src="/adjs/space.js" type="text/javascript"></script> 
    </div> 
    <div class="main_content"> 
     <div class="main_content_body"> 
      <h1>Spring常用配置</h1> 
      <div id="article_content" class="article_content"> 
       <p>----------------------------------------------------------------------------------------------<br />[<span style="color:#cc0000;">版权申明：本文系作者原创，转载请注明出处</span>]&nbsp;<br />文章出处：<a target="_blank" href="http://blog.csdn.net/sdksdk0/article/details/52471101">http://blog.csdn.net/sdksdk0/article/details/52471101</a><br />作者：朱培 &nbsp; &nbsp; &nbsp;ID：sdksdk0 &nbsp; &nbsp; &nbsp;邮箱： zhupei@tianfang1314.cn &nbsp;&nbsp;<br />--------------------------------------------------------------------------------------------<br /></p>
       <p><span style="font-size:14px;">本文主要分享的是spring的基础，常用配置，都是非常重要的内容，理论+实践，文末配有案例源码下载链接。spring是开发javaee查询非常重要的一个框架，可以为后续使用springMVC打下良好的基础，其实主要的就是一些配置文件，需要哪些jar包，我们应该如何去配置，本文都有非常详细的阐述。通过使用spring整合hibernate、struts整合spring来做的SSH框架也是非常经典的一个开发模式，作为开发者都应该努力把这一部分的内容掌握，当然了，对于配置文件也不需要你一个个类的去背下来，只要记得去哪里找到这个类的配置，知道这个类有哪些方法是我们可以用的就好。同时对于不同的版本有的类方法的使用也是存在稍许差异的，学会多总结，多运用，多思考。</span></p>
       <p><br /></p>
       <p><span style="border-collapse: separate; font-family: 'Times New Roman'; border-spacing: 0px;font-size:14px;"></span></p>
       <div style="margin: 0px auto; padding: 20px; border: 0px; font-family: Helvetica, arial, freesans, clean, sans-serif; line-height: 1.6; color: rgb(51, 51, 51); max-width: 960px;">
        <h1 style="font-size: 28px; margin: 0px 0px 10px; padding: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; -webkit-font-smoothing: antialiased; color: rgb(0, 0, 0);">简介</h1>
        <p style="font-size: 14px; margin-top: 10px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">什么是：Spring</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">Spring是一个分层的JavaSE/EE full-stack(一站式) 轻量级开源框架。 轻量级：依赖其他内容教小，使用资源消耗也少。 核心：控制反转Ioc和面向切面AOP。 spring生成的东西叫做bean.</p>
        <p style="margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;"></p>
        <pre id="best-content-2364042545" accuse="aContent" class="best-text mb-10" style="margin-top: 10px; margin-bottom: 10px; padding: 0px; font-family: 'Microsoft YaHei', arial, 'courier new', courier, 宋体, monospace; white-space: pre-wrap; word-wrap: break-word; line-height: 29px; color: rgb(51, 51, 51); min-height: 55px; background-color: rgb(255, 255, 255);"><span style="font-size:12px;">spring是J2EE应用程序框架，是轻量级的IoC和AOP的容器框架，主要是针对javaBean的生命周期进行管理的轻量级容器。Spring包含7大模块，每个模块可以单独使用、也可以结合起来使用；但是在实际开发过程中，一般需要结合Struts、Hibernate来使用。</span></pre>
        <br />
        <p></p>
        <h2 style="font-size: 24px; margin: 20px 0px 10px; padding: 0px; border-width: 0px 0px 1px; border-top-style: initial; border-right-style: initial; border-left-style: initial; border-top-color: initial; border-right-color: initial; border-left-color: initial; -webkit-font-smoothing: antialiased; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); color: rgb(0, 0, 0);">体系结构</h2>
        <p style="font-size: 14px; margin-top: 10px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">核心组件：beans、core、context、expression</p>
        <h2 style="font-size: 24px; margin: 20px 0px 10px; padding: 0px; border-width: 0px 0px 1px; border-top-style: initial; border-right-style: initial; border-left-style: initial; border-top-color: initial; border-right-color: initial; border-left-color: initial; -webkit-font-smoothing: antialiased; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); color: rgb(0, 0, 0);"><img width="500" height="300" src="http://img.blog.csdn.net/20160908142347321?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" /><br /></h2>
        <h2 style="font-size: 24px; margin: 20px 0px 10px; padding: 0px; border-width: 0px 0px 1px; border-top-style: initial; border-right-style: initial; border-left-style: initial; border-top-color: initial; border-right-color: initial; border-left-color: initial; -webkit-font-smoothing: antialiased; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); color: rgb(0, 0, 0);">第一个实例</h2>
        <p style="font-size: 14px; margin-top: 10px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">loc控制反转 1、导入jar包 2、spring核心配置文件 3、使用api获得对象实例</p>
        <h2 style="font-size: 24px; margin: 20px 0px 10px; padding: 0px; border-width: 0px 0px 1px; border-top-style: initial; border-right-style: initial; border-left-style: initial; border-top-color: initial; border-right-color: initial; border-left-color: initial; -webkit-font-smoothing: antialiased; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); color: rgb(0, 0, 0);">DI依赖注入</h2>
        <p style="font-size: 14px; margin-top: 10px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">一个类中使用了另一个类，就称为两个类存在依赖关系。从spring获得service实现类（ioc),spring自动将dao的实现类注入给service。</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">service提供setter方法。</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">BeanFactory和ApplicationContext</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">采用延迟加载，当第一次调用getBean方法时初始化，Application在加载完成配置文件之后进行初始化。</p>
        <h2 style="font-size: 24px; margin: 20px 0px 10px; padding: 0px; border-width: 0px 0px 1px; border-top-style: initial; border-right-style: initial; border-left-style: initial; border-top-color: initial; border-right-color: initial; border-left-color: initial; -webkit-font-smoothing: antialiased; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); color: rgb(0, 0, 0);">装配bean基于xml</h2>
        <p style="font-size: 14px; margin-top: 10px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">bean的三种实例化方式</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">1、使用默认构造
         <bean id=""></bean></p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">&lt;!-- 创建dao --&gt;
&lt;bean id=&quot;bookDaoId&quot;  class=&quot;cn.tf.demo2.BookDaoImpl&quot;&gt;&lt;/bean&gt;
&lt;!-- 创建service --&gt;
&lt;bean id=&quot;bookServiceId&quot;  class=&quot;cn.tf.demo2.BookServiceImpl&quot;&gt;
    &lt;!-- 使用property来完成注入,name表示当前属性名称，ref表示配置文件中另一个bean的引用 --&gt;
    &lt;property name=&quot;bookDao&quot; ref=&quot;bookDaoId&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
</code></pre>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">2、静态工厂 public class MyFactory {</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">    public static PersonDao  createPersonDao(){
        return new PersonDaoImpl(); 
    }
}
</code></pre>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">配置文件中：</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">&lt;bean id=&quot;personDaoId&quot;   class=&quot;cn.tf.demo4.MyFactory&quot;  factory-method=&quot;createPersonDao&quot;&gt;&lt;/bean&gt;
</code></pre>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">3、实例工厂 使用工厂之前需要先创建</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">//实例工厂
public PersonDao  createPersonDao(){
    return new PersonDaoImpl(); 
}
</code></pre>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">配置文件：</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">&lt;bean id=&quot;myFactory&quot; class=&quot;cn.tf.demo4.MyFactory&quot;  &gt;
&lt;/bean&gt;

&lt;bean id=&quot;personDaoId&quot; factory-bean=&quot;myFactory&quot;  factory-method=&quot;createPersonDao&quot;&gt;&lt;/bean&gt;
</code></pre>
        <h3 style="font-size: 18px; margin: 20px 0px 10px; padding: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; -webkit-font-smoothing: antialiased;">bean的种类</h3>
        <p style="font-size: 14px; margin-top: 10px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">普通bean:之前使用的所有bean，一般很常用，例如service和dao等</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">工厂bean：spring提供接口，FactoryBean,一个特殊的bean，具有Factory工厂，用于生产特定的Bean的bean。例如：ProxyFactoryBean用于生产代理对象的一个bean。</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">id属性和name属性：</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">id可以自动提示，名称不能重复。 name如果没有配置id，name也可以使用，可以编写多个名称，使用逗号分隔。</p>
        <h3 style="font-size: 18px; margin: 20px 0px 10px; padding: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; -webkit-font-smoothing: antialiased;">bean的作用域</h3>
        <p style="font-size: 14px; margin-top: 10px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">spring默认情况下创建的bean都是单例的。</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">
         <bean id="" scope=""></bean></p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">取值： singleton:单例。 prototype:多例。</p>
        <h3 style="font-size: 18px; margin: 20px 0px 10px; padding: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; -webkit-font-smoothing: antialiased;">bean的生命周期</h3>
        <ol style="font-size: 14px; margin: 15px 0px; padding: 0px 0px 0px 30px; border: 0px;">
         <li style="margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-style: initial; border-color: initial; ">初始化</li>
         <li style="margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-style: initial; border-color: initial; ">setter 属性注入</li>
         <li style="margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-style: initial; border-color: initial; ">获得配置bean名称：replyDaoId，必须实现接口：BeanNameAware</li>
         <li style="margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-style: initial; border-color: initial; ">获得spring容器，相当于TestApp new ClassPath... , 必须实现接口：ApplicationContextAware --- 也可以实现接口：BeanFactoryAware</li>
         <li style="margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-style: initial; border-color: initial; ">初始化之前执行</li>
         <li style="margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-style: initial; border-color: initial; ">初始化前属性设置</li>
         <li style="margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-style: initial; border-color: initial; ">初始化方法，需要在xml配置 &lt;bean init-method='' &gt;</li>
         <li style="margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-style: initial; border-color: initial; ">初始化之后执行</li>
         <li style="margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-style: initial; border-color: initial; ">save 方法</li>
        </ol>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">-</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">&lt;bean id=&quot;replyDaoId&quot; class=&quot;cn.tf.demo6.ReplyDao&quot;  
    init-method=&quot;replyInit&quot;
    destroy-method=&quot;replyDestory&quot;&gt;
    &lt;property name=&quot;username&quot;  value=&quot;张三&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;

&lt;!-- 配置后处理bean --&gt;
&lt;bean  class=&quot;cn.tf.demo6.MyBeanPostProcessor&quot;&gt;&lt;/bean&gt;
</code></pre>
        <h3 style="font-size: 18px; margin: 20px 0px 10px; padding: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; -webkit-font-smoothing: antialiased;">依赖注入</h3>
        <p style="font-size: 14px; margin-top: 10px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">手工装配：使用xml：1、构造方法注入；2、setter方法注入；3、接口注入</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">&lt;bean id=&quot;categoryId&quot; class=&quot;cn.tf.demo7.a.Category&quot;&gt;
    &lt;!-- 描述构造方法的一个参数
        index:参数的索引
        type:参数的类型
        value:参数的值
        ref:参数的值的引用对象
     --&gt;        
    &lt;constructor-arg index=&quot;0&quot; type=&quot;java.lang.String&quot; value=&quot;123&quot;&gt;&lt;/constructor-arg&gt;
    &lt;constructor-arg index=&quot;1&quot; type=&quot;java.lang.Integer&quot; value=&quot;456&quot;&gt;&lt;/constructor-arg&gt;
&lt;/bean&gt;
</code></pre>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">自动装配：框架整合时:</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">byType：按类型装配 
byName：按名称装配
constructor按构造
auto 不确定装配。
</code></pre>
        <h3 style="font-size: 18px; margin: 20px 0px 10px; padding: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; -webkit-font-smoothing: antialiased;">p命名空间</h3>
        <p style="font-size: 14px; margin-top: 10px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">简化set方法注入</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">setter方法：</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">&lt;bean id=&quot;&quot; class=&quot;&quot; &gt;
&lt;property name=&quot;username&quot; value=&quot;make&quot; &gt;
&lt;property name=&quot;address&quot; ref=&quot;addressId&quot; &gt;
</code></pre>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">p命名空间：</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">&lt;bean id=&quot;companyId&quot; class=&quot;cn.tf.demo7.b.Company&quot;  p:name=&quot;指令汇科技&quot;  p:address-ref=&quot;addressId&quot;&gt;&lt;/bean&gt;
&lt;bean id=&quot;addressId&quot;  class=&quot;cn.tf.demo7.b.Address&quot;  p:addr=&quot;湖南衡阳&quot;&gt;&lt;/bean&gt;
</code></pre>
        <h3 style="font-size: 18px; margin: 20px 0px 10px; padding: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; -webkit-font-smoothing: antialiased;">SpEL表达式</h3>
        <p style="font-size: 14px; margin-top: 10px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">spring表达式语言。</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">value=&quot;#{表达式}&quot;</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">&lt;bean id=&quot;studentId&quot; class=&quot;cn.tf.demo7.c.Student&quot;&gt;
        &lt;property name=&quot;teacher&quot;  value=&quot;#{teacherId}&quot;&gt;&lt;/property&gt;
        &lt;property name=&quot;pi&quot;  value=&quot;#{T(java.lang.Math).PI}&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;

&lt;bean id=&quot;teacherId&quot;  class=&quot;cn.tf.demo7.c.Teacher&quot;  &gt;
        &lt;property name=&quot;tname&quot;  value=&quot;#{'abc'.toUpperCase()}&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
</code></pre>
        <h3 style="font-size: 18px; margin: 20px 0px 10px; padding: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; -webkit-font-smoothing: antialiased;">集合注入</h3>
        <p style="font-size: 14px; margin-top: 10px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">常见的5种集合：</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">private String[] arrayData;
private List&lt;String&gt; listData;
private Set&lt;String&gt; setData;
private Map&lt;String,String&gt; mapData;
private Properties propsData;
</code></pre>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">配置文件中：</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">&lt;bean id=&quot;collbeanId&quot; class=&quot;cn.tf.demo7.d.CollBean&quot;&gt;
    &lt;!-- 数组 --&gt;
    &lt;property name=&quot;arrayData&quot;&gt;
        &lt;array&gt;
            &lt;value&gt;数组1&lt;/value&gt;
            &lt;value&gt;数组2&lt;/value&gt;
            &lt;value&gt;数组3&lt;/value&gt;
        &lt;/array&gt;
    &lt;/property&gt;
    &lt;!-- List集合 --&gt;
    &lt;property name=&quot;listData&quot;&gt;
        &lt;list&gt;
            &lt;value&gt;List集合1&lt;/value&gt;
            &lt;value&gt;List集合1&lt;/value&gt;
            &lt;value&gt;List集合1&lt;/value&gt;
        &lt;/list&gt;
    &lt;/property&gt;

    &lt;!-- Set集合 --&gt;
    &lt;property name=&quot;setData&quot;&gt;
        &lt;set&gt;
            &lt;value&gt;set集合1&lt;/value&gt;
            &lt;value&gt;set集合2&lt;/value&gt;
            &lt;value&gt;set集合3&lt;/value&gt;
        &lt;/set&gt;
    &lt;/property&gt;

    &lt;!-- map集合 --&gt;
    &lt;property name=&quot;mapData&quot;&gt;
        &lt;map&gt;
            &lt;entry  key=&quot;aa&quot;  value=&quot;00&quot;&gt;&lt;/entry&gt;
            &lt;entry&gt;
                &lt;key&gt;&lt;value&gt;bb&lt;/value&gt;&lt;/key&gt;
                &lt;value&gt;11&lt;/value&gt;
            &lt;/entry&gt;
        &lt;/map&gt;
    &lt;/property&gt;

    &lt;!-- properties对象 --&gt;
    &lt;property name=&quot;propsData&quot;&gt;
        &lt;props&gt;
            &lt;prop key=&quot;aa&quot;&gt;00&lt;/prop&gt;
            &lt;prop key=&quot;bb&quot;&gt;11&lt;/prop&gt;
        &lt;/props&gt;
    &lt;/property&gt;
&lt;/bean&gt;
</code></pre>
        <h2 style="font-size: 24px; margin: 20px 0px 10px; padding: 0px; border-width: 0px 0px 1px; border-top-style: initial; border-right-style: initial; border-left-style: initial; border-top-color: initial; border-right-color: initial; border-left-color: initial; -webkit-font-smoothing: antialiased; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); color: rgb(0, 0, 0);">装配bean基于注解</h2>
        <p style="font-size: 14px; margin-top: 10px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">使用注解类用于取代xml配置文件，优点在于：xml配置少，使用注解配置信息简化。不足之处在于硬编码。</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">@Component组件，用于取代
         <bean id=""></bean></p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">@Component(value = &quot;orderDaoId&quot;)
</code></pre>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">@Repository 修饰dao层</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">@Service 修饰service层</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">Controller 修饰web层</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">方案1：</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">@AutoWired 自动注入，默认按照类型
    可以修饰在字段上
    也可以修饰在setter方法上
    缺点：如果同一个接口，有两个实现类，就会存在冲突

@Qualifier 修改AutoWired匹配，将按照名称匹配。
</code></pre>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">方案2：</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">@Resource 可以完成 @AutoWired 和 @Qualifier 功能 例如：@Resource(&quot;userDaoId&quot;) 按照名称匹配</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;"> @PostConstruct 初始化
 @PreDestroy 销毁
</code></pre>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">@Scope 作用域</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">使用注解，必须将“被注解修饰的类”交予spring进行扫描。</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">&lt;context:component-scan base-package=&quot;类所在包名&quot;&gt;
</code></pre>
        <h2 style="font-size: 24px; margin: 20px 0px 10px; padding: 0px; border-width: 0px 0px 1px; border-top-style: initial; border-right-style: initial; border-left-style: initial; border-top-color: initial; border-right-color: initial; border-left-color: initial; -webkit-font-smoothing: antialiased; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); color: rgb(0, 0, 0);">整合junit</h2>
        <p style="font-size: 14px; margin-top: 10px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">导入spring-test-4.2.5.RELEASE.jar</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations=&quot;classpath:cn/tf/demo9/beans.xml&quot;)
public class TestApp {
@Autowired
private UserDao userDao;

@Test
public void test1(){
    userDao.save(); 
}
</code></pre>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">在classpath中加载注解文件</p>
        <h3 style="font-size: 18px; margin: 20px 0px 10px; padding: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; -webkit-font-smoothing: antialiased;">xml和注解混搭使用</h3>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">&lt;!-- 使 注入的注解可以使用 --&gt;
 &lt;context:annotation-config&gt;&lt;/context:annotation-config&gt;

&lt;!-- 所有的bean都在xml配置 
    所有的依赖都是注解
--&gt;
&lt;bean id=&quot;userDaoId&quot; class=&quot;cn.tf.demo10.UserDaoImpl&quot;&gt;&lt;/bean&gt;
&lt;bean id=&quot;userServiceId&quot; class=&quot;cn.tf.demo10.UserServiceImpl&quot;&gt;&lt;/bean&gt;
&lt;bean id=&quot;userActionId&quot; class=&quot;cn.tf.demo10.UserAction&quot;&gt;&lt;/bean&gt;
</code></pre>
        <h1 style="font-size: 28px; margin: 20px 0px 10px; padding: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; -webkit-font-smoothing: antialiased; color: rgb(0, 0, 0);">AOP</h1>
        <p style="font-size: 14px; margin-top: 10px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">面向切面编程：采用横向抽取机制，取代了传统纵向继承体系重复性代码。</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">AOP的应用：性能监视、事务管理、安全检查、缓存等。</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">target:目标类，需要被代理的类，也是需要被增强的类。</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">JoinPoint:连接点，需要被拦截点，spring中连接点就是方法，及目标类所有方法。 PointCut:切入点，已经被拦截的连接点，有哪些连接点需要被增强。 Advice:通知/增强，增强的内容。 Weaving:织入，用增强Advice应用目标类Target,生成代理对象过程。 proxy:代理。 aspect:切面，通知advice与切入点Point</p>
        <h3 style="font-size: 18px; margin: 20px 0px 10px; padding: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; -webkit-font-smoothing: antialiased;">spring AOP底层</h3>
        <p style="font-size: 14px; margin-top: 10px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">接口+实现类：使用jdk的动态代理。</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">实现类：使用的是cglib（字节码增强）</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">字节码增强框架，不用使用接口，在运行时，动态的创建目标类的子类，目标类不能使用final。</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">目标类：</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">public class BookService {
public void addBook(){
    System.out.println(&quot;cglib addBook&quot;);
}

public void updateBook(){
    System.out.println(&quot;cglib updateBook&quot;);
}
}
</code></pre>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">切面类：</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">public class MyAspect {

public void before(){
    System.out.println(&quot;之前执行&quot;);
}
public void after(){
    System.out.println(&quot;之后执行&quot;);
}
}
</code></pre>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">工厂：</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">public static Object getBean(){
    final BookService  bookService=new BookService();
    //切面类
    final MyAspect myAspect=new MyAspect();
    //生成代理类。代理类是目标类的子类
    //核心类
    Enhancer enhancer=new Enhancer();
    //确定父类
    enhancer.setSuperclass(bookService.getClass());
    //设置处理
    enhancer.setCallback(new MethodInterceptor() {

        @Override
        public Object intercept(Object proxy, Method method, Object[] args,
                MethodProxy methodProxy) throws Throwable {
            //执行目标类的方法
            myAspect.before();
            Object obj=method.invoke(bookService, args);
            methodProxy.invokeSuper(proxy, args);
            myAspect.after();
            return obj;
        }
    }); 
    //创建代理类
    Object proxyObj=enhancer.create();
    return proxyObj;

}
</code></pre>
        <h3 style="font-size: 18px; margin: 20px 0px 10px; padding: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; -webkit-font-smoothing: antialiased;">aop通知类型</h3>
        <p style="font-size: 14px; margin-top: 10px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">aop是一种思想，有aop联盟提出，spring对aop的规范进行支持。</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">5种通知： 前置通知：在目标方法执行之前实施增强。 后置通知：在执行目标后实施增强。 环绕通知：在方法执行前后实施增强。 异常抛出通知：在方法抛出异常后实施增强。 引介通知：在目标类中添加一些新的方法和属性。</p>
        <h3 style="font-size: 18px; margin: 20px 0px 10px; padding: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; -webkit-font-smoothing: antialiased;">spring工厂bean--半自动</h3>
        <p style="font-size: 14px; margin-top: 10px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">切面类：需要实现接口， MethodInterceptor 环绕通知</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">public class MyAspect implements MethodInterceptor {

@Override
public Object invoke(MethodInvocation mi) throws Throwable {
    System.out.println(&quot;前&quot;);
    //执行目标方法
    Object obj = mi.proceed();
    System.out.println(&quot;后&quot;);
    return obj;
}
}
</code></pre>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">配置文件：</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">&lt;bean id=&quot;personServiceId&quot; class=&quot;cn.tf.demo3.PersonServiceImpl&quot;&gt;&lt;/bean&gt;

&lt;!-- 切面类，含通知 --&gt;
&lt;bean id=&quot;myAspect&quot; class=&quot;cn.tf.demo3.MyAspect&quot; &gt;&lt;/bean&gt;

&lt;!-- 
        ProxyFactoryBean 用于生产代理类一个特殊的工厂bean
        proxyInterfaces 用于确定需要实现接口
        interceptorNames 用于确定通知实现类，需要提供的bean名称
        target 用于确定代理类bean名称
 --&gt;

&lt;!-- 代理类 --&gt;
&lt;bean id=&quot;personServiceProxyId&quot;  class=&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;&gt;
    &lt;!-- 确定接口 --&gt;
    &lt;property name=&quot;proxyInterfaces&quot; value=&quot;cn.tf.demo3.PersonService&quot;&gt;&lt;/property&gt;
    &lt;!-- 确定通知 --&gt;
    &lt;property name=&quot;interceptorNames&quot;  value=&quot;myAspect&quot;&gt;&lt;/property&gt;
    &lt;!-- 确定目标类 --&gt;
    &lt;property name=&quot;target&quot;  ref=&quot;personServiceId&quot;&gt;&lt;/property&gt;
    &lt;!-- 强制cglib --&gt;
    &lt;property name=&quot;optimize&quot; value=&quot;true&quot;&gt;&lt;/property&gt;

&lt;/bean&gt;
</code></pre>
        <h3 style="font-size: 18px; margin: 20px 0px 10px; padding: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; -webkit-font-smoothing: antialiased;">AOP全自动</h3>
        <p style="font-size: 14px; margin-top: 10px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">使用AspectJ的表达式</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">
         <bean id="studentServiceId" class="cn.tf.demo4.StudentServiceImpl"></bean></p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">&lt;!-- 切面类，含通知 --&gt;
&lt;bean id=&quot;myAspect&quot; class=&quot;cn.tf.demo4.MyAspect&quot; &gt;&lt;/bean&gt;
&lt;!-- aop编程 --&gt;
&lt;aop:config&gt;
    &lt;!-- 切入点 --&gt;
    &lt;aop:pointcut expression=&quot;execution(* cn.tf.demo4.*ServiceImpl.*(..))&quot; id=&quot;myPointCut&quot;/&gt;
    &lt;!-- 一个特殊的切面  ,包含一个切入点和一个通知--&gt;
    &lt;aop:advisor advice-ref=&quot;myAspect&quot;  pointcut-ref=&quot;myPointCut&quot;/&gt;
&lt;/aop:config&gt;
</code></pre>
        <h1 style="font-size: 28px; margin: 20px 0px 10px; padding: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; -webkit-font-smoothing: antialiased; color: rgb(0, 0, 0);">aspectJ切入点表达式</h1>
        <p style="font-size: 14px; margin-top: 10px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">导入jar包： aspectJ、springaop、aop联盟规范、</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">1、execution</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">execution:匹配方法的执行 格式：execution(修饰符 返回值类型 包.类名.方法名(参数列表)throws 异常)</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">修饰符：public|private</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">返回值类型：String|void|*</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">包：cn.tf.service --指定包 cn.tf.pm.<span style="margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-style: initial; border-color: initial; ">.Service --指定模块 cn.tf.pm.</span>.service.. --表示当前目录以及子目录</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">类名：UserService --指定名称 *Service --以Service结尾</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">方法名：save --执行方法名称 add* --add开头</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">参数列表： () --无参 （int) --参数整形 （String,int） --两个参数 (..) --参数任意</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">execution(* cn.tf.<span style="margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-style: initial; border-color: initial; ">.service..</span>.*(..))</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">2、within 确定包或者子包 within(cn.tf.pm.*.service..)</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">3、this 匹配实现接口的代理类 this(cn.tf.pm.user.service.UserService)</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">4、taeget 目标类</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">5、args 参数列表</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">6、bean</p>
        <h2 style="font-size: 24px; margin: 20px 0px 10px; padding: 0px; border-width: 0px 0px 1px; border-top-style: initial; border-right-style: initial; border-left-style: initial; border-top-color: initial; border-right-color: initial; border-left-color: initial; -webkit-font-smoothing: antialiased; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); color: rgb(0, 0, 0);">通知类型</h2>
        <p style="font-size: 14px; margin-top: 10px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">前置通知[Before advice]：在连接点前面执行，前置通知不会影响连接点的执行，除非此处抛出异常。</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">正常返回通知[After returning advice]：在连接点正常执行完成后执行，如果连接点抛出异常，则不会执行。</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">异常返回通知[After throwing advice]：在连接点抛出异常后执行。</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">返回通知[After (finally) advice]：在连接点执行完成后执行，不管是正常执行完成，还是抛出异常，都会执行返回通知中的内容。</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">环绕通知[Around advice]：环绕通知围绕在连接点前后，比如一个方法调用的前后。这是最强大的通知类型，能在方法调用前后自定义一些操作。环绕通知还需要负责决定是继续处理join point(调用ProceedingJoinPoint的proceed方法)还是中断执行。</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">声明通知类型</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">            1 前置通知 , 目标方法之前执行。
                * 第一个参数为JoinPoint，可以获得目标方法名等。
            &lt;aop:before method=&quot;myBefore&quot; pointcut-ref=&quot;myPonitCut&quot;/&gt;
            2 后置通知，目标方法之后执行，可以获得返回值。 通过“returning”属性配置第二个参数的名称，获得返回值的，类型必须Object
                * 第一个参数为：JoinPoint
                * 第二个参数为：Object xxx
            &lt;aop:after-returning method=&quot;myAfterReturning&quot; pointcut-ref=&quot;myPonitCut&quot; returning=&quot;xxx&quot;/&gt;
            3 环绕通知， 目标方法前后
                方法要求：public Object myAround(ProceedingJoinPoint joinPoint) throws Throwable{
                执行目标方法：joinPoint.proceed();
            &lt;aop:around method=&quot;myAround&quot; pointcut-ref=&quot;myPonitCut&quot;/&gt;
            4 抛出异常通知，目标方法出现异常时才执行。通过“throwing”属性配置第二个参数的名称,获得具体的异常信息，类型必须是Throwable
                * 第一个参数为：JoinPoint
                * 第二个参数为：Throwable e
            &lt;aop:after-throwing method=&quot;myAfterThrowing&quot; pointcut-ref=&quot;myPonitCut&quot; throwing=&quot;e&quot;/&gt;
</code></pre>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">切面类：</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">public void myBefore(JoinPoint  joinPoint){
    System.out.println(&quot;前置通知&quot;+joinPoint.getSignature().getName());
}

public void myAfterReturning(JoinPoint joinPoint,Object xxx){
    System.out.println(&quot;后置通知, 返回值：&quot; + xxx);
}

public Object myAround(ProceedingJoinPoint joinPoint) throws Throwable{

    System.out.println(&quot;前&quot;);
    //必须执行目标方法
    Object obj = joinPoint.proceed();

    System.out.println(&quot;后&quot;);
    return obj;
}

public void myAfterThrowing(JoinPoint joinPoint, Throwable e){
    System.out.println(&quot;抛出异常通知, &quot; + e.getMessage());
}

public void myAfter(){
    System.out.println(&quot;最终&quot;);
}
</code></pre>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">配置文件：</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">&lt;aop:config&gt;
    &lt;aop:aspect  ref=&quot;myAspect&quot;&gt;
        &lt;aop:pointcut expression=&quot;execution(* cn.tf.demo5.*.*(..))&quot; id=&quot;myPointCut&quot;/&gt;
        &lt;!-- 声明通知类型 --&gt;
        &lt;aop:before method=&quot;myBefore&quot;  pointcut-ref=&quot;myPointCut&quot;/&gt; 
        &lt;aop:after-returning method=&quot;myAfterReturning&quot; pointcut-ref=&quot;myPointCut&quot; returning=&quot;xxx&quot;/&gt;
        &lt;aop:around method=&quot;myAround&quot;  pointcut-ref=&quot;myPointCut&quot; /&gt;
        &lt;aop:after-throwing method=&quot;myAfterThrowing&quot;  pointcut-ref=&quot;myPointCut&quot;  throwing=&quot;e&quot;/&gt;
        &lt;aop:after method=&quot;myAfter&quot;  pointcut-ref=&quot;myPointCut&quot;/&gt;


    &lt;/aop:aspect&gt;
&lt;/aop:config&gt;
</code></pre>
        <h2 style="font-size: 24px; margin: 20px 0px 10px; padding: 0px; border-width: 0px 0px 1px; border-top-style: initial; border-right-style: initial; border-left-style: initial; border-top-color: initial; border-right-color: initial; border-left-color: initial; -webkit-font-smoothing: antialiased; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); color: rgb(0, 0, 0);">基于注解</h2>
        <p style="font-size: 14px; margin-top: 10px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">如果使用注解进行aop开发，必须进行aspectj自动代理。</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">&lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;                 
</code></pre>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">通知注解：</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">@Before @AfterReturning @Around @AfterThrowing @After</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">@Component
@Aspect
public class MyAspect {

@Before(&quot;myPointCut()&quot;)
public void myBefore(JoinPoint  joinPoint){
    System.out.println(&quot;前置通知&quot;+joinPoint.getSignature().getName());
}

@AfterReturning(value=&quot;execution(* cn.tf.demo6.*.*(..))&quot;,returning=&quot;xxx&quot;)
public void myAfterReturning(JoinPoint joinPoint,Object xxx){
    System.out.println(&quot;后置通知, 返回值：&quot; + xxx);
}

@Around(&quot;myPointCut()&quot;)
public Object myAround(ProceedingJoinPoint joinPoint) throws Throwable{

    System.out.println(&quot;前&quot;);
    //必须执行目标方法
    Object obj = joinPoint.proceed();

    System.out.println(&quot;后&quot;);
    return obj;
}

@AfterThrowing(value=&quot;myPointCut()&quot;,throwing=&quot;e&quot;)
public void myAfterThrowing(JoinPoint joinPoint, Throwable e){
    System.out.println(&quot;抛出异常通知, &quot; + e.getMessage());
}
@After(&quot;myPointCut()&quot;)
public void myAfter(){
    System.out.println(&quot;最终&quot;);
}
//用来声明切入点表达式，在通知中通过方法名来获得，相当于调用方法
@Pointcut(&quot;execution(* cn.tf.demo6.*.*(..))&quot;)
private void myPointCut(){

}
}
</code></pre>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">配置文件：</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
 xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xsi:schemaLocation=&quot;
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    &quot;&gt; &lt;!-- bean definitions here --&gt;


    &lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;                 
    &lt;!-- 扫描注解 --&gt;
    &lt;context:component-scan base-package=&quot;cn.tf.demo6&quot;&gt;&lt;/context:component-scan&gt;
&lt;/beans&gt;
</code></pre>
        <h1 style="font-size: 28px; margin: 20px 0px 10px; padding: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; -webkit-font-smoothing: antialiased; color: rgb(0, 0, 0);">JDBC模板</h1>
        <p style="font-size: 14px; margin-top: 10px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">导入spring中的jdbc,tx,c3p0,dbcp</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">属性文件：jdbcInfo.properties</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">jdbc.driverClass=com.mysql.jdbc.Driver
jdbc.jdbcUrl=jdbc:mysql://localhost:3306/dbone
jdbc.user=zp
jdbc.password=a
</code></pre>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">在spring的配置文件中配置：</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">&lt;!-- 加载properties文件 --&gt;
&lt;context:property-placeholder location=&quot;classpath:cn/tf/jdbc/d/jdbcInfo.properties&quot;/&gt;

&lt;!-- 配置数据源 
    如果properties文件已经被加载，可以通过 ＄{key}获得配置文件中内容
--&gt;
&lt;bean id=&quot;dataSourceId&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;
    &lt;property name=&quot;driverClass&quot; value=&quot;＄{jdbc.driverClass}&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;jdbcUrl&quot; value=&quot;＄{jdbc.jdbcUrl}&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;user&quot; value=&quot;＄{jdbc.user}&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;password&quot; value=&quot;＄{jdbc.password}&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;

&lt;!-- 配置dao --&gt;
&lt;bean id=&quot;userDaoId&quot; class=&quot;cn.tf.jdbc.d.UserDao&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSourceId&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
</code></pre>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">dao的配置可以依据实际情况写。</p>
        <h1 style="font-size: 28px; margin: 20px 0px 10px; padding: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; -webkit-font-smoothing: antialiased; color: rgb(0, 0, 0);">事务管理</h1>
        <p style="font-size: 14px; margin-top: 10px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">一组业务操作，要么全部成功，要么全部失败。</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">ACID：原子性、一致性、隔离型、持久性 隔离问题：脏读、不可重复读、虚读</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">隔离级别：读未提交、读已提交、可重复读、串行化</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">jdbc事务操作：
try{
    //获得连接
    conn=DriverManage...
    //开启事务
    conn.setAutoCommit(false);
savepoint=conn.setSavepoint();

conn.commit();

}catch(){
if(savepoint==null){
    //回滚
    conn.rollback();

}else{
    conn.rollback(savepoint);
conn.commit();
}

}finally{
    //释放
    conn.close();
}
</code></pre>
        <h2 style="font-size: 24px; margin: 20px 0px 10px; padding: 0px; border-width: 0px 0px 1px; border-top-style: initial; border-right-style: initial; border-left-style: initial; border-top-color: initial; border-right-color: initial; border-left-color: initial; -webkit-font-smoothing: antialiased; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); color: rgb(0, 0, 0);">Spring的事务</h2>
        <p style="font-size: 14px; margin-top: 10px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">spring是基于aop进行事务管理的，导入jar包：spring-tx...</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">PlatformTransactionManager:平台事务管理器，spring的基本操作都必须izai事务管理器的平台上进行操作。 TransactionStatus:事务状态，用于记录事务状态，方便在事务管理器平台上，进行事务操作。&nbsp;<br />TransactionDefinition:事务定义，事物详情说明，</p>
        <h2 style="font-size: 24px; margin: 20px 0px 10px; padding: 0px; border-width: 0px 0px 1px; border-top-style: initial; border-right-style: initial; border-left-style: initial; border-top-color: initial; border-right-color: initial; border-left-color: initial; -webkit-font-smoothing: antialiased; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); color: rgb(0, 0, 0);">核心组件详解</h2>
        <h3 style="font-size: 18px; margin: 20px 0px 10px; padding: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; -webkit-font-smoothing: antialiased;">平台事务管理器</h3>
        <p style="font-size: 14px; margin-top: 10px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">JDBC、Hibernate、Mybatis、JPA都具有自己的事务管理器。</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">导入jar包：spring-jdbc... spring-orm...</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">事务管理器： DataSourceTransactionManager ， JDBC事务管理器 HibernateTransactionManager ， hibernate 事务管理器</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">通过事务管理器去解析事务详情去获得事务状态，通过状态管理事务。</p>
        <h3 style="font-size: 18px; margin: 20px 0px 10px; padding: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; -webkit-font-smoothing: antialiased;">事务状态</h3>
        <p style="font-size: 14px; margin-top: 10px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">是否是新的事务、是否有保存点、设置了回滚、是否回滚、是否已经完成、刷新状态同步</p>
        <h3 style="font-size: 18px; margin: 20px 0px 10px; padding: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; -webkit-font-smoothing: antialiased;">事务详情：</h3>
        <p style="font-size: 14px; margin-top: 10px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">名称、是否只读、获得超时时间、隔离级别、传播行为</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">传播行为：</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">PROPAGATION_REQUIRED, required ： 默认 支持当前事务，A如果已经在事务中，B将直接使用A中事务。 如果不存在创建新的，A不在事务中，B将创建新的。</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">PROPAGATION_SUPPORTS supports ： 支持当前事务，A如果已经在事务中，B将直接使用A中事务。 使用非事务执行，A不在事务中，B将也不使用事务执行。</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">PROPAGATION_MANDATORY mandatory ： 支持当前事务，A如果已经在事务中，B将直接使用A中事务。 如果没有事务将抛出异常，A不在事务中，B将抛异常。</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">PROPAGATION<span style="margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-style: initial; border-color: initial; ">REQUIRES</span>NEW ，requires new ： 创建新的。如果A没有，B将创建新的。 挂起之前的。如果A有事务，B将挂起A的事务，创建新的。</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">PROPAGATION<span style="margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-style: initial; border-color: initial; ">NOT</span>SUPPORTED ， not supported： B将以非事务执行，如果A已经在事务中，将A事务挂起。</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">PROPAGATION_NEVER ，never B将以非事务执行，如果A已经在事务中，B将抛异常。</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">PROPAGATION_NESTED nested ： 将采用嵌套事务执行。底层使用保存点Savepoint</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">采用配置的方式去设置“事务详情”，spring通过事务管理器去管理事务。</p>
        <h2 style="font-size: 24px; margin: 20px 0px 10px; padding: 0px; border-width: 0px 0px 1px; border-top-style: initial; border-right-style: initial; border-left-style: initial; border-top-color: initial; border-right-color: initial; border-left-color: initial; -webkit-font-smoothing: antialiased; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); color: rgb(0, 0, 0);">案例：转账</h2>
        <h3 style="font-size: 18px; margin: 20px 0px 10px; padding: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; -webkit-font-smoothing: antialiased;">半自动事务</h3>
        <p style="font-size: 14px; margin-top: 10px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">使用工厂Bean生成代理、 设置事务管理代码、设置事务管理器 、设置接口、设置目标、设置事务属性（事务详情）</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">配置文件：</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">&lt;!-- 事务管理器 --&gt;
&lt;bean id=&quot;txManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;
    &lt;property name=&quot;DataSource&quot;  ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;

&lt;!-- 代理对象,用于生产事务的代理对象 --&gt;
&lt;bean id=&quot;accountServiceProxy&quot;  class=&quot;org.springframework.transaction.interceptor.TransactionProxyFactoryBean&quot;&gt;
    &lt;property name=&quot;transactionManager&quot;  ref=&quot;txManager&quot;&gt;&lt;/property&gt;
    &lt;!-- 接口 --&gt;
    &lt;property name=&quot;proxyInterfaces&quot; value=&quot;cn.tf.service.AccountService&quot;&gt;&lt;/property&gt;
    &lt;!-- 目标类 --&gt;
    &lt;property name=&quot;target&quot; ref=&quot;accountService&quot;&gt;&lt;/property&gt;
    &lt;!-- 事务属性 --&gt;
    &lt;property name=&quot;transactionAttributes&quot;&gt;
        &lt;props&gt;
            &lt;prop  key=&quot;transfer&quot;&gt;PROPAGATION_REQUIRED&lt;/prop&gt;
        &lt;/props&gt;
    &lt;/property&gt;
&lt;/bean&gt;
</code></pre>
        <h3 style="font-size: 18px; margin: 20px 0px 10px; padding: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; -webkit-font-smoothing: antialiased;">使用AOP</h3>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">&lt;!-- 事务管理器 --&gt;
&lt;bean  id=&quot;txManager&quot;  class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;
    &lt;property name=&quot;dataSource&quot;  ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;

&lt;!-- 配置事务详情 --&gt;
&lt;tx:advice id=&quot;txAdvice&quot; transaction-manager=&quot;txManager&quot;&gt;
    &lt;tx:attributes&gt;
        &lt;!-- &lt;tx:method&gt; 确定事务详情配置
                name : 确定方法名称
                    transfer 确定名称
                    add*    add开头
                    *   任意
                propagation 传播行为
                isolation 隔离级别
                read-only=&quot;false&quot; 是否只读
                rollback-for=&quot;&quot; 指定异常回滚（-）
                no-rollback-for=&quot;&quot; 指定异常提交（+）
            经典应用：开发中规定
                &lt;tx:method name=&quot;add*&quot;/&gt;
                &lt;tx:method name=&quot;update*&quot;/&gt;
                &lt;tx:method name=&quot;delete*&quot;/&gt;
                &lt;tx:method name=&quot;find*&quot; read-only=&quot;true&quot;/&gt; --&gt;
        &lt;tx:method name=&quot;transfer&quot; propagation=&quot;REQUIRED&quot; isolation=&quot;DEFAULT&quot; read-only=&quot;false&quot;/&gt;
    &lt;/tx:attributes&gt;
&lt;/tx:advice&gt;

&lt;!-- aop，将通知应用 目标类 --&gt;
&lt;aop:config&gt;
    &lt;aop:pointcut expression=&quot;execution(* cn.tf.service..*.*(..))&quot; id=&quot;myPointcut&quot;/&gt;
    &lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut-ref=&quot;myPointcut&quot;/&gt;
&lt;/aop:config&gt;
</code></pre>
        <h3 style="font-size: 18px; margin: 20px 0px 10px; padding: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; -webkit-font-smoothing: antialiased;">基于注解</h3>
        <p style="font-size: 14px; margin-top: 10px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">添加注解：@Transactional，可以修饰在类或者方法上</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">在xml中配置事务管理器，并交由spring。</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">&lt;!-- 事务管理器 --&gt;
&lt;bean  id=&quot;txManager&quot;  class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;
    &lt;property name=&quot;dataSource&quot;  ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
&lt;!-- 使用注解 --&gt;
&lt;tx:annotation-driven  transaction-manager=&quot;txManager&quot;/&gt;
</code></pre>
        <h1 style="font-size: 28px; margin: 20px 0px 10px; padding: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; -webkit-font-smoothing: antialiased; color: rgb(0, 0, 0);">web开发</h1>
        <p style="font-size: 14px; margin-top: 10px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">导入jar包，spring-web...</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">在web.xml中配置：</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">&lt;!-- 通过 servletContext 初始化参数设置xml位置 --&gt;
&lt;context-param&gt;
    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
    &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;
&lt;/context-param&gt;

&lt;!-- spring 监听器 --&gt;
&lt;listener&gt;
    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
&lt;/listener&gt;
</code></pre>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">在servlet的post方法中：</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">//spring 加容器存在 ServletContext中, sc.setAttribute(name, object)
    ServletContext sc = this.getServletContext();
    ApplicationContext ac = WebApplicationContextUtils.getWebApplicationContext(sc);
    UserService userService = (UserService) ac.getBean(&quot;userService&quot;);
</code></pre>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">在applicationContext.xml中</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">&lt;bean id=&quot;userService&quot;  class=&quot;cn.tf.service.UserService&quot;&gt;&lt;/bean&gt;
</code></pre>
        <h1 style="font-size: 28px; margin: 20px 0px 10px; padding: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; -webkit-font-smoothing: antialiased; color: rgb(0, 0, 0);">SSH整合</h1>
        <p style="font-size: 14px; margin-top: 10px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">jar包</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">配置文件： applicationContext.xml</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
   xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
   xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;
   xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;
   xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans 
                       http://www.springframework.org/schema/beans/spring-beans.xsd
                       http://www.springframework.org/schema/context 
                       http://www.springframework.org/schema/context/spring-context.xsd
                       http://www.springframework.org/schema/aop 
                       http://www.springframework.org/schema/aop/spring-aop.xsd
                       http://www.springframework.org/schema/tx 
                       http://www.springframework.org/schema/tx/spring-tx.xsd&quot;&gt;

&lt;/beans&gt;
</code></pre>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">hibernate.cfg.xml</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE hibernate-configuration PUBLIC
&quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;
&quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;&gt;
&lt;hibernate-configuration&gt;
&lt;session-factory&gt;
&lt;property name=&quot;hibernate.connection.driver_class&quot;&gt;
    com.mysql.jdbc.Driver
&lt;/property&gt;
&lt;property name=&quot;hibernate.connection.url&quot;&gt;
    jdbc:mysql://localhost:3306/dbone?useUnicode=true&amp;amp;characterEncoding=UTF-8
&lt;/property&gt;
&lt;property name=&quot;hibernate.connection.username&quot;&gt;zp&lt;/property&gt;
&lt;property name=&quot;hibernate.connection.password&quot;&gt;a&lt;/property&gt;
&lt;property name=&quot;hibernate.dialect&quot;&gt;
    org.hibernate.dialect.MySQL5Dialect
&lt;/property&gt;

&lt;!-- 3 sql --&gt;
&lt;property name=&quot;hibernate.show_sql&quot;&gt;true&lt;/property&gt;
&lt;property name=&quot;hibernate.format_sql&quot;&gt;true&lt;/property&gt;

&lt;!-- 4 语句ddl --&gt;
&lt;property name=&quot;hibernate.hbm2ddl.auto&quot;&gt;update&lt;/property&gt;

&lt;!-- 5 取消bean校验 --&gt;
&lt;property name=&quot;javax.persistence.validation.mode&quot;&gt;none&lt;/property&gt;

&lt;!-- 6 绑定session --&gt;
&lt;property name=&quot;hibernate.current_session_context_class&quot;&gt;
    thread
&lt;/property&gt;


&lt;!-- 添加映射 --&gt;
&lt;mapping resource=&quot;cn/tf/domain/User.hbm.xml&quot; /&gt;


&lt;/session-factory&gt;
&lt;/hibernate-configuration&gt;
</code></pre>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">User.hbm.xml</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE hibernate-mapping PUBLIC 
&quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;
&quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&gt;
&lt;hibernate-mapping&gt;
&lt;class name=&quot;cn.tf.domain.User&quot; table=&quot;t_user&quot;&gt;
    &lt;id name=&quot;id&quot;&gt;
        &lt;generator class=&quot;native&quot;&gt;&lt;/generator&gt;
    &lt;/id&gt;
    &lt;property name=&quot;username&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;password&quot;&gt;&lt;/property&gt;
&lt;/class&gt;
&lt;/hibernate-mapping&gt;
</code></pre>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">struts.xml</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE struts PUBLIC
&quot;-//Apache Software Foundation//DTD Struts Configuration 2.3//EN&quot;
&quot;http://struts.apache.org/dtds/struts-2.3.dtd&quot;&gt;
&lt;struts&gt;
&lt;!-- 开发模式 --&gt;
&lt;constant name=&quot;struts.devMode&quot; value=&quot;true&quot; /&gt;
&lt;!-- struts标签模板 --&gt;
&lt;constant name=&quot;struts.ui.theme&quot; value=&quot;simple&quot;&gt;&lt;/constant&gt;

&lt;package name=&quot;default&quot; namespace=&quot;/&quot; extends=&quot;struts-default&quot;&gt;

&lt;/package&gt;
&lt;/struts&gt;
</code></pre>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">web.xml</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;web-app version=&quot;3.0&quot; 
xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; 
xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; 
xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee 
http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;&gt;
&lt;!-- 确定xml文件位置 --&gt;
&lt;context-param&gt;
    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
    &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;
&lt;/context-param&gt;
&lt;!-- spring监听器，加载xml文件 --&gt;
&lt;listener&gt;
    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
&lt;/listener&gt;

&lt;!-- struts 前端控制器 --&gt;
&lt;filter&gt;
    &lt;filter-name&gt;struts2&lt;/filter-name&gt;
    &lt;filter-class&gt;org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter&lt;/filter-class&gt;
&lt;/filter&gt;

&lt;filter-mapping&gt;
    &lt;filter-name&gt;struts2&lt;/filter-name&gt;
    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
&lt;/filter-mapping&gt;
&lt;/web-app&gt;
</code></pre>
        <h2 style="font-size: 24px; margin: 20px 0px 10px; padding: 0px; border-width: 0px 0px 1px; border-top-style: initial; border-right-style: initial; border-left-style: initial; border-top-color: initial; border-right-color: initial; border-left-color: initial; -webkit-font-smoothing: antialiased; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); color: rgb(0, 0, 0);">spring整合hibernate</h2>
        <p style="font-size: 14px; margin-top: 10px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">有cfg.xml</p>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">使用Hibernate模板</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">&lt;bean  id=&quot;userService&quot;  class=&quot;cn.tf.service.impl.UserServiceImpl&quot;&gt;
    &lt;property name=&quot;userDao&quot; ref=&quot;userDao&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
&lt;bean id=&quot;userDao&quot;  class=&quot;cn.tf.dao.impl.UserDaoImpl&quot;&gt;
    &lt;property name=&quot;hibernateTemplate&quot;  ref=&quot;hibernateTemplate&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;

&lt;bean id=&quot;hibernateTemplate&quot;  class=&quot;org.springframework.orm.hibernate3.HibernateTemplate&quot;&gt;
    &lt;property name=&quot;sessionFactory&quot;  ref=&quot;sessionFactory&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;

session工厂 ,特殊的bean生成SessionFactory加载配置文件
&lt;bean id=&quot;sessionFactory&quot;  class=&quot;org.springframework.orm.hibernate3.LocalSessionFactoryBean&quot;&gt;
    &lt;property name=&quot;configLocations&quot;  value=&quot;classpath:hibernate.cfg.xml&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;

事务管理
&lt;bean id=&quot;txManager&quot;  class=&quot;org.springframework.orm.hibernate3.HibernateTransactionManager&quot;&gt;
        &lt;property name=&quot;sessionFactory&quot;  ref=&quot;sessionFactory&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;

 事务详情 
&lt;tx:advice  id=&quot;txAdvice&quot;  transaction-manager=&quot;txManager&quot;&gt;
    &lt;tx:attributes&gt;
        &lt;tx:method name=&quot;add*&quot;/&gt;
        &lt;tx:method name=&quot;update*&quot;/&gt;
        &lt;tx:method name=&quot;delete*&quot;/&gt;
        &lt;tx:method name=&quot;find*&quot;  read-only=&quot;true&quot;/&gt;
    &lt;/tx:attributes&gt;
&lt;/tx:advice&gt;

&lt;aop:config&gt;
    &lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut=&quot;execution(* cn.tf.service..*.*(..))&quot;/&gt;
&lt;/aop:config&gt;
</code></pre>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">无cfg.xml</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">&lt;!-- 1 service层 --&gt;
&lt;bean id=&quot;userService&quot; class=&quot;cn.tf.service.impl.UserServiceImpl&quot;&gt;
    &lt;property name=&quot;userDao&quot; ref=&quot;userDao&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
&lt;!-- 2 dao 层 --&gt;
&lt;bean id=&quot;userDao&quot; class=&quot;cn.tf.dao.impl.UserDaoImpl&quot;&gt;
    &lt;property name=&quot;sessionFactory&quot; ref=&quot;sessionFactory&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;

&lt;!-- 3.1 加载properties配置文件 --&gt;
&lt;context:property-placeholder location=&quot;classpath:jdbcInfo.properties&quot;/&gt;
&lt;!-- 3.2 数据源（c3p0）--&gt;
&lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;
    &lt;property name=&quot;driverClass&quot; value=&quot;＄{jdbc.driverClass}&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;jdbcUrl&quot; value=&quot;＄{jdbc.jdbcUrl}&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;user&quot; value=&quot;＄{jdbc.user}&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;password&quot; value=&quot;＄{jdbc.password}&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;

&lt;!-- 4 session工厂 
    * LocalSessionFactoryBean 特殊bean生成 SessionFactory
--&gt;
&lt;bean id=&quot;sessionFactory&quot; class=&quot;org.springframework.orm.hibernate3.LocalSessionFactoryBean&quot;&gt;

    &lt;!-- 4.1 配置数据源 --&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
    &lt;!-- 4.2 hibernate 特有设置 --&gt;
    &lt;property name=&quot;hibernateProperties&quot;&gt;
        &lt;props&gt;
            &lt;prop key=&quot;hibernate.dialect&quot;&gt;org.hibernate.dialect.MySQL5Dialect&lt;/prop&gt;
            &lt;prop key=&quot;hibernate.show_sql&quot;&gt;true&lt;/prop&gt;
            &lt;prop key=&quot;hibernate.format_sql&quot;&gt;true&lt;/prop&gt;
            &lt;prop key=&quot;hibernate.hbm2ddl.auto&quot;&gt;update&lt;/prop&gt;
            &lt;prop key=&quot;javax.persistence.validation.mode&quot;&gt;none&lt;/prop&gt;
        &lt;/props&gt;
    &lt;/property&gt;
    &lt;property name=&quot;mappingDirectoryLocations&quot; value=&quot;classpath:cn/tf/*&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;

&lt;!-- 5 事务管理 --&gt;
&lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.orm.hibernate3.HibernateTransactionManager&quot;&gt;
    &lt;property name=&quot;sessionFactory&quot; ref=&quot;sessionFactory&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;

&lt;!-- 5.2 事务详情 --&gt;
&lt;tx:advice id=&quot;txAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;
    &lt;tx:attributes&gt;
        &lt;tx:method name=&quot;add*&quot;/&gt;
        &lt;tx:method name=&quot;update*&quot;/&gt;
        &lt;tx:method name=&quot;delete*&quot;/&gt;
        &lt;tx:method name=&quot;find*&quot; read-only=&quot;true&quot;/&gt;
    &lt;/tx:attributes&gt;
&lt;/tx:advice&gt;

&lt;!-- 5.3 aop 事务通知 应用 切入点 --&gt;
&lt;aop:config&gt;
    &lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut=&quot;execution(* cn.tf.service..*.*(..))&quot;/&gt;
&lt;/aop:config&gt;
</code></pre>
        <h2 style="font-size: 24px; margin: 20px 0px 10px; padding: 0px; border-width: 0px 0px 1px; border-top-style: initial; border-right-style: initial; border-left-style: initial; border-top-color: initial; border-right-color: initial; border-left-color: initial; -webkit-font-smoothing: antialiased; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); color: rgb(0, 0, 0);">struts整合spring</h2>
        <p style="font-size: 14px; margin-top: 10px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">在applicationContext.xml中配置：</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">&lt;bean id=&quot;userAction&quot;  class=&quot;cn.tf.action.UserAction&quot; scope=&quot;prototype&quot;&gt;
    &lt;property name=&quot;userService&quot; ref=&quot;userService&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
</code></pre>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">在struts.xml中</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">&lt;package name=&quot;default&quot; namespace=&quot;/&quot; extends=&quot;struts-default&quot;&gt;
    &lt;action name=&quot;userAction_*&quot; class=&quot;userAction&quot; method=&quot;{1}&quot;&gt;
        &lt;result name=&quot;add&quot;&gt;/success.jsp&lt;/result&gt;
    &lt;/action&gt;   
&lt;/package&gt;
</code></pre>
        <h2 style="font-size: 24px; margin: 20px 0px 10px; padding: 0px; border-width: 0px 0px 1px; border-top-style: initial; border-right-style: initial; border-left-style: initial; border-top-color: initial; border-right-color: initial; border-left-color: initial; -webkit-font-smoothing: antialiased; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); color: rgb(0, 0, 0);">注解开发</h2>
        <p style="font-size: 14px; margin-top: 10px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">配置扫描注解</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">&lt;bean id=&quot;hibernateTemplate&quot;  class=&quot;org.springframework.orm.hibernate3.HibernateTemplate&quot;&gt;
    &lt;property name=&quot;sessionFactory&quot;  ref=&quot;sessionFactory&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;

&lt;context:component-scan base-package=&quot;cn.tf&quot;&gt;&lt;/context:component-scan&gt;
</code></pre>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">配置事务管理器</p>
        <pre style="font-size: 13px; margin-top: 15px; margin-bottom: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">&lt;!-- 5 事务管理 --&gt;
&lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.orm.hibernate3.HibernateTransactionManager&quot;&gt;
    &lt;property name=&quot;sessionFactory&quot; ref=&quot;sessionFactory&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
&lt;!-- 5.2 注释事务 --&gt;
&lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&gt;
</code></pre>
        <p style="font-size: 14px; margin-top: 15px; margin-bottom: 15px; padding-top: 0px; padding-bottom: 0px; border: 0px; border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial;">struts的配置中：</p>
        <pre style="font-size: 13px; margin-top: 15px; padding: 6px 10px; border: 1px solid rgb(204, 204, 204); border-image-source: initial; border-image-slice: initial; border-image-width: initial; border-image-outset: initial; border-image-repeat: initial; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 19px; overflow: auto; border-radius: 3px; margin-bottom: 0px !important; background-color: rgb(248, 248, 248);"><code style="margin: 0px; padding: 0px; font-size: 12px; font-family: Consolas, 'Liberation Mono', Courier, monospace; border: none; border-radius: 3px; background-image: initial; background-attachment: initial; background-color: transparent; background-origin: initial; background-clip: initial;">@Namespace(&quot;/&quot;)  
@ParentPackage(&quot;struts-default&quot;)  

public class UserAction extends ActionSupport  implements ModelDriven&lt;User&gt;{

private User user=new User();
@Autowired
private UserService userService;

@Override
public User getModel() {
    return user;
}

public void setUserService(UserService userService) {
    this.userService = userService;
}
@Action(value=&quot;userAction_add&quot; ,results=@Result(name=&quot;add&quot;,location=&quot;/success.jsp&quot;))
public String add(){
    this.userService.addUser(user);
    return &quot;add&quot;;
}

}</code></pre>
       </div>
       <br />
       <p></p>
       <p>本文中使用的案例源码：</p>
       <p><a target="_blank" href="https://github.com/sdksdk0/springDemo1">https://github.com/sdksdk0/springDemo1</a>&nbsp; （包含bean装配，scope作用域，spring表达式，spring生命周期，注解配置等）<br /></p>
       <p><a target="_blank" href="https://github.com/sdksdk0/springDemo2">https://github.com/sdksdk0/springDemo2</a> &nbsp;（包括AOP、aspectJ切入点表达式、jdbc模板等）<br /></p>
       <p><a target="_blank" href="https://github.com/sdksdk0/springDemo3">https://github.com/sdksdk0/springDemo3</a>&nbsp; （包含事务管理、转账案例、spring整合hibernate，struts整合spring等）<br /></p>
       <p><br /></p>
       <p><br /></p>
       <p><br /></p>
       <p><br /></p> 
      </div> 
     </div> 
     <hr /> 
    </div> 
    <div id="footerAd1"> 
     <script src="/adjs/adfooter1.js" type="text/javascript"></script> 
    </div> 
    <div id="footerAd2"> 
     <script src="/adjs/adfooter2.js" type="text/javascript"></script> 
    </div> 
   </div> 
   <div id="nav1"> 
    <div id="right0"> 
     <script src="/adjs/adright1.js" type="text/javascript"></script> 
    </div> 
    <div id="right1"> 
     <br /> 
     <strong>【更多文章】</strong> 
     <hr /> 
     <strong>1.&nbsp;</strong>
     <a href="http://www.magicsite.cn/blog/Java/Java/Java157570.html" target="_blank">项目分享:通过使用SSH框架的公司-学员关系管理系统（CRM）</a> 
     <hr style="height: 1px; border: none; border-top: 1px dashed #0066CC;" /> 
     <strong>2.&nbsp;</strong>
     <a href="http://www.magicsite.cn/blog/Java/Java/Java157569.html" target="_blank">文件一键上传、汉字转拼音、excel文件上传下载功能模块的实现</a> 
     <hr style="height: 1px; border: none; border-top: 1px dashed #0066CC;" /> 
     <strong>3.&nbsp;</strong>
     <a href="http://www.magicsite.cn/blog/Java/Java/Java157568.html" target="_blank">大数据量中的模糊查询优化方案</a> 
     <hr style="height: 1px; border: none; border-top: 1px dashed #0066CC;" /> 
     <strong>4.&nbsp;</strong>
     <a href="http://www.magicsite.cn/blog/web/nginx/nginx157567.html" target="_blank">那些年踩过的坑</a> 
     <hr style="height: 1px; border: none; border-top: 1px dashed #0066CC;" /> 
     <strong>5.&nbsp;</strong>
     <a href="http://www.magicsite.cn/blog/Java/Java/Java157566.html" target="_blank">SSM实现秒杀系统案例</a> 
     <hr style="height: 1px; border: none; border-top: 1px dashed #0066CC;" /> 
     <strong>6.&nbsp;</strong>
     <a href="http://www.magicsite.cn/blog/Java/Hibernate/Hibernate157572.html" target="_blank">粗浅看Struts2和Hibernate框架</a> 
     <hr style="height: 1px; border: none; border-top: 1px dashed #0066CC;" /> 
     <strong>7.&nbsp;</strong>
     <a href="http://www.magicsite.cn/blog/web/PHP/PHP157573.html" target="_blank">一小时入门PHP</a> 
     <hr style="height: 1px; border: none; border-top: 1px dashed #0066CC;" /> 
     <strong>8.&nbsp;</strong>
     <a href="http://www.magicsite.cn/blog/web/Tomcat/Tomcat157574.html" target="_blank">使用nexus搭建Maven私服</a> 
     <hr style="height: 1px; border: none; border-top: 1px dashed #0066CC;" /> 
     <strong>9.&nbsp;</strong>
     <a href="http://www.magicsite.cn/blog/Java/Java/Java157575.html" target="_blank">在线支付功能的设计及其实现</a> 
     <hr style="height: 1px; border: none; border-top: 1px dashed #0066CC;" /> 
     <strong>10.&nbsp;</strong>
     <a href="http://www.magicsite.cn/blog/Java/Java/Java157576.html" target="_blank">用户注册的邮箱激活模块的设计与实现</a> 
     <hr style="height: 1px; border: none; border-top: 1px dashed #0066CC;" /> 
    </div> 
    <div id="right2"> 
     <script src="/adjs/adright2.js" type="text/javascript"></script> 
    </div> 
    <div id="right3"> 
     <script src="/adjs/adright3.js" type="text/javascript"></script> 
    </div> 
    <div id="right4"> 
     <script src="/adjs/adright4.js" type="text/javascript"></script> 
    </div> 
    <div id="right5"> 
     <script src="/adjs/adright5.js" type="text/javascript"></script> 
    </div> 
   </div> 
  </div> 
  <div id="footerAd"> 
   <script src="/adjs/adfooter.js" type="text/javascript"></script> 
  </div> 
  <div id="footer">
    Copyright 2016 
   <a target="_blank" href="http://www.magicsite.cn" style="color: white; text-decoration: none;">MagicSite.cn</a> 
  </div>   
 </body>
</html>