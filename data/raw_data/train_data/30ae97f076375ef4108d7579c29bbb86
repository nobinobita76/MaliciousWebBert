<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="zh-CN" lang="zh-CN">
 <head> 
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
  <meta http-equiv="X-UA-Compatible" content="IE=EmulateIE7" /> 
  <meta http-equiv="Content-Language" content="zh-CN" /> 
  <title>古树悬叶的博客-中国福利彩票双色球2014064期【高手2l74⒊l[Q]】</title> 
  <meta name="generator" content="Z-Blog 1.8 Walle Build 100427" /> 
  <link type="text/css" href="http://blog.zinewow.com/themes/EasyBule/STYLE/jscss/jquery-ui-1.8.4.custom.css" rel="stylesheet" /> 
  <link rel="stylesheet" rev="stylesheet" href="http://blog.zinewow.com/themes/EasyBule/source/style.css.asp" type="text/css" media="screen" /> 
  <script type="text/javascript" src="http://blog.zinewow.com/themes/EasyBule/SCRIPT/jquery-1.4.2.min.js"></script> 
  <script src="http://blog.zinewow.com/themes/EasyBule/SCRIPT/common.js" type="text/javascript"></script> 
  <script language="JavaScript" type="text/javascript">
		var str00="http://blog.zinewow.com/";
		var str01="名称或邮箱不能为空";
		var str02="名称或邮箱格式不对";
		var str03="留言不能为空或过长";
		var str06="显示UBB表情>>";
		var intMaxLen="1000";
		var strBatchView="";
		var strBatchInculde="";
		var strBatchCount="";
	</script> 
  <script type="text/javascript" src="http://blog.zinewow.com/themes/EasyBule/SCRIPT/jquery-ui-1.8.4.custom.min.js"></script> 
  <script type="text/javascript" src="http://blog.zinewow.com/themes/EasyBule/SCRIPT/jquery.easing.min.js"></script> 
  <script type="text/javascript" src="http://blog.zinewow.com/themes/EasyBule/SCRIPT/jquery.lavalamp.min.js"></script> 
  <script type="text/javascript" src="http://blog.zinewow.com/themes/EasyBule/SCRIPT/jquery.effects.fold.js"></script> 
  <script type="text/javascript" src="http://blog.zinewow.com/themes/EasyBule/SCRIPT/js.js"></script> 
  <link rel="stylesheet" href="http://blog.zinewow.com/PLUGIN/LightBox/Code/lightbox.css" type="text/css" media="screen" /> 
  <script type="text/javascript">
var lightBoxM = 620,lightBoxH = "http://blog.zinewow.com/PLUGIN/LightBox/Code/lightbox-";
var lightBoxL = lightBoxH + "ico-loading.gif",lightBoxP = lightBoxH + "btn-prev.gif",lightBoxN = lightBoxH + "btn-next.gif",lightBoxC = lightBoxH + "btn-close.gif",lightBoxB = lightBoxH + "blank.gif",lightBoxF = false;
</script> 
  <script type="text/javascript" src="http://blog.zinewow.com/PLUGIN/LightBox/Code/lightbox.pack.js"></script> 
 </head> 
 <body class="multi catalog"> 
  <div id="layout">
   <div id="main"> 
    <!--Header--> 
    <div id="header"> 
     <div id="top"> 
      <a id="cooltoplogo" class="l" href="http://blog.zinewow.com/"></a> 
      <div id="topmenu" class="l">
       <a href="http://www.zinewow.com" target="_blank">Home</a> ｜ 
       <a href="http://blog.zinewow.com/">Blog</a> ｜ 
       <a href="http://url.cn/MkZssR" target="_blank"> &gt;&gt; Flash 平台开发者交流 QQ 群：15965780，欢迎开发者加入。</a> 
      </div> 
      <div id="topicon" class="r"> 
       <a href="http://blog.zinewow.com/rss.xml"><img src="http://blog.zinewow.com/themes/EasyBule/STYLE/EasyBule/eb_icon_feed.gif" width="16" height="16" /></a> 
      </div> 
      <div class="clear"></div> 
     </div> 
     <div id="banner">
      <div id="logo"></div>
     </div> 
    </div> 
    <!--End Header--> 
    <!--Nav--> 
    <div id="nav"> 
     <ul class="topnavbox"> 
      <li><a href="http://blog.zinewow.com/">Index</a></li> 
      <li><a href="/tags.asp">TagCloud</a></li> 
      <li><a href="/guestbook.asp">GuestBook</a></li> 
      <li><a href="/cmd.asp?act=login">Admin</a></li> 
     </ul> 
     <div id="shareit-box">
      <div id="shareit-header"></div>
      <div class="clear"></div>
      <div id="shareit-body" class="l"> 
       <ul>
        <li><span class="feed-icon"><a href="http://blog.zinewow.com/feed.asp?cate=2" target="_blank"><img title="rss" width="20" height="12" src="http://blog.zinewow.com/IMAGE/LOGO/rss.png" border="0" alt="rss" /></a>&nbsp;</span><a href="http://blog.zinewow.com/catalog.asp?cate=2">Flash Platform<span class="article-nums"> (468)</span></a></li>
        <li><span class="feed-icon"><a href="http://blog.zinewow.com/feed.asp?cate=8" target="_blank"><img title="rss" width="20" height="12" src="http://blog.zinewow.com/IMAGE/LOGO/rss.png" border="0" alt="rss" /></a>&nbsp;</span><a href="http://blog.zinewow.com/catalog.asp?cate=8">Photoshop! WOW<span class="article-nums"> (13)</span></a></li>
        <li><span class="feed-icon"><a href="http://blog.zinewow.com/feed.asp?cate=5" target="_blank"><img title="rss" width="20" height="12" src="http://blog.zinewow.com/IMAGE/LOGO/rss.png" border="0" alt="rss" /></a>&nbsp;</span><a href="http://blog.zinewow.com/catalog.asp?cate=5">Swift<span class="article-nums"> (8)</span></a></li>
        <li><span class="feed-icon"><a href="http://blog.zinewow.com/feed.asp?cate=14" target="_blank"><img title="rss" width="20" height="12" src="http://blog.zinewow.com/IMAGE/LOGO/rss.png" border="0" alt="rss" /></a>&nbsp;</span><a href="http://blog.zinewow.com/catalog.asp?cate=14">Objective-C<span class="article-nums"> (6)</span></a></li>
        <li><span class="feed-icon"><a href="http://blog.zinewow.com/feed.asp?cate=10" target="_blank"><img title="rss" width="20" height="12" src="http://blog.zinewow.com/IMAGE/LOGO/rss.png" border="0" alt="rss" /></a>&nbsp;</span><a href="http://blog.zinewow.com/catalog.asp?cate=10">Java<span class="article-nums"> (8)</span></a></li>
        <li><span class="feed-icon"><a href="http://blog.zinewow.com/feed.asp?cate=7" target="_blank"><img title="rss" width="20" height="12" src="http://blog.zinewow.com/IMAGE/LOGO/rss.png" border="0" alt="rss" /></a>&nbsp;</span><a href="http://blog.zinewow.com/catalog.asp?cate=7">JavaScript<span class="article-nums"> (5)</span></a></li>
        <li><span class="feed-icon"><a href="http://blog.zinewow.com/feed.asp?cate=6" target="_blank"><img title="rss" width="20" height="12" src="http://blog.zinewow.com/IMAGE/LOGO/rss.png" border="0" alt="rss" /></a>&nbsp;</span><a href="http://blog.zinewow.com/catalog.asp?cate=6">HTML,CSS<span class="article-nums"> (5)</span></a></li>
        <li><span class="feed-icon"><a href="http://blog.zinewow.com/feed.asp?cate=11" target="_blank"><img title="rss" width="20" height="12" src="http://blog.zinewow.com/IMAGE/LOGO/rss.png" border="0" alt="rss" /></a>&nbsp;</span><a href="http://blog.zinewow.com/catalog.asp?cate=11">Access<span class="article-nums"> (2)</span></a></li>
        <li><span class="feed-icon"><a href="http://blog.zinewow.com/feed.asp?cate=3" target="_blank"><img title="rss" width="20" height="12" src="http://blog.zinewow.com/IMAGE/LOGO/rss.png" border="0" alt="rss" /></a>&nbsp;</span><a href="http://blog.zinewow.com/catalog.asp?cate=3">Miscellaneous<span class="article-nums"> (114)</span></a></li>
        <li><span class="feed-icon"><a href="http://blog.zinewow.com/feed.asp?cate=1" target="_blank"><img title="rss" width="20" height="12" src="http://blog.zinewow.com/IMAGE/LOGO/rss.png" border="0" alt="rss" /></a>&nbsp;</span><a href="http://blog.zinewow.com/catalog.asp?cate=1">Stories<span class="article-nums"> (19)</span></a></li>
        <li><span class="feed-icon"><a href="http://blog.zinewow.com/feed.asp?cate=4" target="_blank"><img title="rss" width="20" height="12" src="http://blog.zinewow.com/IMAGE/LOGO/rss.png" border="0" alt="rss" /></a>&nbsp;</span><a href="http://blog.zinewow.com/catalog.asp?cate=4">Movies, TV and Celebrities<span class="article-nums"> (44)</span></a></li>
        <li><span class="feed-icon"><a href="http://blog.zinewow.com/feed.asp?cate=13" target="_blank"><img title="rss" width="20" height="12" src="http://blog.zinewow.com/IMAGE/LOGO/rss.png" border="0" alt="rss" /></a>&nbsp;</span><a href="http://blog.zinewow.com/catalog.asp?cate=13">ADs<span class="article-nums"> (5)</span></a></li>
        <li><span class="feed-icon"><a href="http://blog.zinewow.com/feed.asp?cate=12" target="_blank"><img title="rss" width="20" height="12" src="http://blog.zinewow.com/IMAGE/LOGO/rss.png" border="0" alt="rss" /></a>&nbsp;</span><a href="http://blog.zinewow.com/catalog.asp?cate=12">Babblings<span class="article-nums"> (7)</span></a></li>
        <li><span class="feed-icon"><a href="http://blog.zinewow.com/feed.asp?cate=15" target="_blank"><img title="rss" width="20" height="12" src="http://blog.zinewow.com/IMAGE/LOGO/rss.png" border="0" alt="rss" /></a>&nbsp;</span><a href="http://blog.zinewow.com/catalog.asp?cate=15">Harmonica<span class="article-nums"> (21)</span></a></li>
       </ul> 
       <div class="clear"></div> 
      </div>
     </div> 
     <div id="topsearch" class="r"> 
      <form method="post" action="http://blog.zinewow.com/cmd.asp?act=Search"> 
       <input type="text" name="edtSearch" id="edtSearch" size="12" /> 
       <input type="submit" value=" " name="btnPost" id="btnPost" /> 
      </form> 
     </div> 
     <div class="clear"></div> 
    </div> 
    <!--End Nav--> 
    <!--Container--> 
    <div id="container"> 
     <!--TopButton--> 
     <div id="shop" class="tips"> 
      <div id="shoptips" class="r"> 
       <a id="goheader" class="tipstop r"></a> 
       <a id="gofooter" class="tipsdown r"></a> 
       <a target="_blank" href="http://blog.zinewow.com/cmd.asp?act=login" class="tipsadmin r"></a> 
       <!--About--> 
       <input name="effects" id="effectTypes" type="hidden" value="fold" /> 
       <a id="button" class="tipsabout r"></a> 
       <div class="toggler">
        <div id="effect" class="ui-widget-content ui-corner-all"> 
         <h3 class="ui-widget-header ui-corner-all">About</h3> &lt;#TEMPLATE_INCLUDE_NINEPAGE_ABOUTME#&gt; 
        </div>
       </div> 
       <!--End About--> 
       <li id="close-sidebar" class="r"><a class="tipswindow r"></a></li> 
       <div class="clear"></div> 
      </div> 
     </div> 
     <!--End TopButton--> 
     <!--Left--> 
     <div id="column" class="l">
      <div class="top r"> 
       <!--Post--> 
       <div class="post cate2 auth1"> 
        <div class="calendar l">
         <p class="month">Feb</p>
         <p class="date">2</p>
        </div> 
        <div class="titlebox l"> 
         <h3><a href="http://blog.zinewow.com/post/736.html">Feathers 示例主题的原始设计资源</a></h3> 
         <ul>
          <li class="comments l">0 Comments</li>
          <li class="categories l">Flash Platform</li>
         </ul> 
        </div> 
        <div class="clear"></div> 
        <div class="artbox">
         <p>如果想要修改<a href="http://feathersui.com/help/theme-sources.html" target="_blank">Feathers 示例主题的原始设计，可以下载源文件</a>。每一个主题文件是一个 FLA 文档，使用&nbsp;Animate CC 打开（Adobe 公司已经抛弃了 Flash CC这个名称，已经改名为 Animate CC）。</p>
         <p>可以修改原始的矢量稿，然后重新导出&nbsp;sprite sheet。可能还需要下载其它用于创建纹理集图像的打包 PNG 的工具，类似<a href="https://www.codeandweb.com/store" target="_blank">&nbsp;Texture Packer</a>。</p>
         <div class="clear"></div> 
         <div class="infobox">
          <ul class="l">
           <li class="tag l"><b>Tags:</b> </li>
           <li class="readmore r"><a target="_blank" href="http://blog.zinewow.com/post/736.html">Read More</a></li>
          </ul>
         </div> 
        </div> 
        <div class="clear"></div> 
       </div> 
       <!--End Post--> 
       <!--Post--> 
       <div class="post cate2 auth1"> 
        <div class="calendar l">
         <p class="month">Feb</p>
         <p class="date">2</p>
        </div> 
        <div class="titlebox l"> 
         <h3><a href="http://blog.zinewow.com/post/735.html">Feathers “主题文件从1.x 版本升级到 2.x 版本”一些备注</a></h3> 
         <ul>
          <li class="comments l">0 Comments</li>
          <li class="categories l">Flash Platform</li>
         </ul> 
        </div> 
        <div class="clear"></div> 
        <div class="artbox">
         <p>Feathers 2.0 开始包含了一个全新的皮肤架构。用于旧主题扩展的 DisplayListWatcher 类仍然存在，可以在一定时间内继续使用它（3.0 开始冒似不存在了……）。如果开发者想利用新的样式提供者带来的好处，那么不得不对主题文件做一些修改。</p>
         <p><strong>扩展新类：StyleNameFunctionTheme</strong></p>
         <p>原生旧主题是扩展f eathers.core.DisplayListWatcher 类：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#008080">// legacy</font>
          <br />
          <font color="#c00000"><b>public</b></font>&nbsp;
          <font color="#c00000"><b>class</b></font>&nbsp;CustomTheme&nbsp;
          <font color="#c00000"><b>extends</b></font>&nbsp;DisplayListWatcher
         </div>
         <p>要创建一个更符合“现代化”的主题，请扩展 feathers.themes.StyleNameFunctionTheme：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#008080">// modern</font>
          <br />
          <font color="#c00000"><b>public</b></font>&nbsp;
          <font color="#c00000"><b>class</b></font>&nbsp;CustomTheme&nbsp;
          <font color="#c00000"><b>extends</b></font>&nbsp;StyleNameFunctionTheme
         </div>
         <p>这么改完之后如果直接编译可能会报错，需要对主题文件稍作修改。</p>
         <p><strong>替换&nbsp;setInitializerForClass() 方法：</strong></p>
         <p>新的&nbsp;<a href="https://feathersui.com/api-reference/feathers/themes/StyleNameFunctionTheme.html" target="_blank">StyleNameFunctionTheme</a>&nbsp;对象依旧会调用函数设置组件的属性，类似旧主题，开发者依旧可以使用字符串作为样式名称区分相同类型的组件却不同的外观，但 API 有些改变。</p>
         <p>旧主题中，开发者使用 setInitializerForClass() 方法，并传入一个组件类和一个设置组件皮肤用的函数，有时候还会传入第三个参数用于区分相同组件的不同外观。</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#008080">// legacy</font>
          <br />this.setInitializerForClass
          <font color="#0000ff">(</font>&nbsp;Button, setButtonStyles&nbsp;
          <font color="#0000ff">)</font>;
          <br />this.setInitializerForClass
          <font color="#0000ff">(</font>&nbsp;Button, setCustomButtonStyles,&nbsp;
          <font color="#ff00ff">&quot;my-custom-button&quot;</font>&nbsp;
          <font color="#0000ff">)</font>;
         </div>
         <p>在新主题中，开发者首先需要获得一个组件类的全局样式提供者引用，然后才能设置它的默认外观与特定的外观：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#008080">// modern</font>
          <br />this.getStyleProviderForClass
          <font color="#0000ff">(</font>Button
          <font color="#0000ff">)</font>.defaultStyleFunction&nbsp;
          <font color="#0000ff">=</font>&nbsp;setButtonStyles;
          <br />this.getStyleProviderForClass
          <font color="#0000ff">(</font>Button
          <font color="#0000ff">)</font>.setFunctionForStyleName
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff00ff">&quot;my-custom-button&quot;</font>, setCustomButtonStyles&nbsp;
          <font color="#0000ff">)</font>;
         </div>
         <p>一个“快速偷懒”的方法：</p>
         <p>如果旧主题文件中有大量的&nbsp;setInitializerForClass() 方法需要替换，这可能会是耗时和繁琐的。 如果需要快速的升级主题，并且懒的清理和整理旧代码内容，可以将以下函数复制到新主题类中：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#c00000"><b>public</b></font>&nbsp;
          <font color="#c00000"><b>function</b></font>&nbsp;setInitializerForClass
          <font color="#0000ff">(</font>type
          <font color="#0000ff">:</font>Class, styleFunction
          <font color="#0000ff">:</font>Function, styleName
          <font color="#0000ff">:</font>String&nbsp;
          <font color="#0000ff">=</font>&nbsp;null
          <font color="#0000ff">)</font>
          <font color="#0000ff">:</font>
          <font color="#c00000"><b>void</b></font>
          <br />
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#c00000"><b>var</b></font>&nbsp;styleProvider
          <font color="#0000ff">:</font>StyleNameFunctionStyleProvider&nbsp;
          <font color="#0000ff">=</font>&nbsp;this.getStyleProviderForClass
          <font color="#0000ff">(</font>type
          <font color="#0000ff">)</font>;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#c00000"><b>if</b></font>
          <font color="#0000ff">(</font>styleName
          <font color="#0000ff">)</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;styleProvider.setFunctionForStyleName
          <font color="#0000ff">(</font>styleName, styleFunction
          <font color="#0000ff">)</font>;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#0000ff">}</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#c00000"><b>else</b></font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;styleProvider.defaultStyleFunction&nbsp;
          <font color="#0000ff">=</font>&nbsp;styleFunction;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#0000ff">}</font>
          <br />
          <font color="#0000ff">}</font>
         </div>
         <p>这样它的签名方法就与旧主题文件的&nbsp;setInitializerForClass() 一样，但使用的却是新主题中的全局样式提供程序。</p>
         <p><strong>替换&nbsp;setInitializerForClassAndSubclasses() 方法：</strong></p>
         <p>这个旧方法没替代的新方法。这个旧方法主要是为了解决旧有皮肤机制中的一些限制：比如默认一个子类在没有设置皮肤的情况下，不会使用父类的皮肤。而新的主题机制中默认子组件如果没有提供皮肤，会使用和父类相同的皮肤（除非子类自己不要父类的皮肤）。所以这个旧方法已经没有存在的必要了。</p>
         <p>旧主题开发时编写的代码：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#008080">// legacy</font>
          <br />this.setInitializerForClassAndSubclasses
          <font color="#0000ff">(</font>&nbsp;Scroller, setScrollerStyles&nbsp;
          <font color="#0000ff">)</font>;
         </div>
         <p>而在新主题开发时，应该直接调用对应的函数，比如开发者对&nbsp;Scroller 类设置了一些通用的样式，就可以在&nbsp;List 组件样式设置的函数中直接调用对应用的函数（如上面的&nbsp;setScrollerStyles() 函数）：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#008080">// modern</font>
          <br />protected&nbsp;
          <font color="#c00000"><b>function</b></font>&nbsp;setListStyles
          <font color="#0000ff">(</font>&nbsp;list
          <font color="#0000ff">:</font>List&nbsp;
          <font color="#0000ff">)</font>
          <font color="#0000ff">:</font>
          <font color="#c00000"><b>void</b></font>
          <br />
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;this.setScrollerStyles
          <font color="#0000ff">(</font>&nbsp;list&nbsp;
          <font color="#0000ff">)</font>;
          <br />
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#008080">// set other styles here</font>
          <br />
          <font color="#0000ff">}</font>
         </div>
         <p>现在当&nbsp;List 类（其它的任何子类）实例化设置样式的时候，setScrollerStyles() 也将会被调用。</p>
         <p><strong>替换&nbsp;exclude() 方法：</strong></p>
         <p>在旧的主题机制下，如果希望一个组件不接受默认的皮肤设置，将该组件传递给 DisplayListWatcher 对象的&nbsp;<a href="https://feathersui.com/api-reference/feathers/core/DisplayListWatcher.html#exclude()" target="_blank">exclude</a>() 方法：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#008080">// legacy</font>
          <br />theme.exclude
          <font color="#0000ff">(</font>&nbsp;button&nbsp;
          <font color="#0000ff">)</font>;
         </div>
         <p>在新的主题机制，直接清除样式提供程序就可以：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#008080">// modern</font>
          <br />button.styleProvider&nbsp;
          <font color="#0000ff">=</font>&nbsp;null;
         </div>
         <p>确保在组件初始化之前清除样式提供程序（皮肤设置是在初始化的步骤中）。默认情况下，当组件被添加到舞台时会执行初始化。</p>
         <p><strong>将“name”替换为“style name”：</strong></p>
         <p>为了解决开发人员使用 getChildByName() 的一些问题，Feathers 不再使用 name 和 nameList 属性来表示主题应该给组件一个可替代的视觉外观，而是使用&nbsp;styleNameList 或 styleName 属性：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#008080">// 旧</font>
          <br />button.nameList.
          <font color="#c00000"><b>add</b></font>
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff00ff">&quot;my-custom-button&quot;</font>&nbsp;
          <font color="#0000ff">)</font>;
          <br />
          <font color="#008080">// or</font>
          <br />button.name&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#ff00ff">&quot;my-custom-button&quot;</font>;
          <br />
          <br />
          <font color="#008080">// 新</font>
          <br />button.styleNameList.
          <font color="#c00000"><b>add</b></font>
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff00ff">&quot;my-custom-button&quot;</font>&nbsp;
          <font color="#0000ff">)</font>;
          <br />
          <font color="#008080">// or</font>
          <br />button.styleName&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#ff00ff">&quot;my-custom-button&quot;</font>;
         </div>
         <p>nameList 依旧存在于Feathers 2.0 和 2.1 版本，但从 2.2 开始它不存在了。在仍然存在的版本中，它只是映射到 styleNameList 属性，以便旧代码继续工作。</p>
         <p><a href="http://doc.starling-framework.org/core/starling/display/DisplayObject.html#name" target="_blank">name</a>&nbsp;属性不再用于对&nbsp;Feathers 的样式化，它不会被映射到&nbsp;styleName 属性，这是为了防止开发者在使用&nbsp;getChildByName() 时出现潜在问题。</p>
         <p>一些可替换的样式名称（被定义为常量）也已经被改名，例如包含&nbsp;NAME 常量名的已经改变为 STYLE_NAME 常量名，例如：Button.ALTERNATE_NAME_DANGER 被改为了&nbsp;Button.ALTERNATE_STYLE_NAME_DANGER 。类似的&nbsp;Slider.DEFAULT_CHILD_NAME_THUMB 被改为了&nbsp;Slider.DEFAULT_CHILD_STYLE_NAME_THUMB。</p>
         <p>对应的，一些父组件上对子组件公开的 API 也有类似的改变，Name 替换为了 StyleName，例如：customThumbName 属性被改为了&nbsp;customThumbStyleName 属性。</p>
         <div class="clear"></div> 
         <div class="infobox">
          <ul class="l">
           <li class="tag l"><b>Tags:</b> </li>
           <li class="readmore r"><a target="_blank" href="http://blog.zinewow.com/post/735.html">Read More</a></li>
          </ul>
         </div> 
        </div> 
        <div class="clear"></div> 
       </div> 
       <!--End Post--> 
       <!--Post--> 
       <div class="post cate2 auth1"> 
        <div class="calendar l">
         <p class="month">Feb</p>
         <p class="date">2</p>
        </div> 
        <div class="titlebox l"> 
         <h3><a href="http://blog.zinewow.com/post/734.html">Feathers3 深入了解“在主题文件中管理资源”一些备注</a></h3> 
         <ul>
          <li class="comments l">0 Comments</li>
          <li class="categories l">Flash Platform</li>
         </ul> 
        </div> 
        <div class="clear"></div> 
        <div class="artbox">
         <p>在《<a href="/post/732.html" target="_blank">创建自定义主题</a>》资料中已经有提到主题文件中有两种方法管理资源文件（类似纹理图像、位图字体等）：一种是静态嵌入资源，另一种是运行时动态加载资源。</p>
         <p><strong>静态嵌入资源：</strong></p>
         <p>这种方法是将主题相关的资源文件编译到最终的 SWF 文件（或 SWC 文件中），将所有资源都放在了一个位置。这种方式的资源都是在启动应用时预加载的，可以直接实例化并使用。</p>
         <p>Feathers 的初学者最简单的方法使用示例主题，只需要将 SWC 文件放在项目的库链接中，在需要的时候实例化它：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#c00000"><b>new</b></font>&nbsp;MetalWorksMobileTheme
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;
         </div>
         <p>但是这种方法需要更多的内存，因为 SWF 是一个压缩文件， Flash 运行时会将整个SWF 解压到内存中，当实例化嵌入式资源时，这些资源会从运行时的&nbsp;“SWF 的库”复制到内存，所以实际是使用了两倍的内存。</p>
         <p style="margin-left: 40px;">SWF 的库不同于 Flash IDE 的库：Flash IDE 的库存放的是所有有用或不用的元件，而 SWF 的库是在运行时解压到内存中所有被编译过的资源文件，它同样是以一个“资源库”的概念存在。</p>
         <p>示例主题嵌入了比较小的纹理集，因此对应用程序来说这种影响可能不会太大，但当开发一个大型项目时用到的资源量如果非常巨大，那么就需要很多内存（因为内存是使用量是翻倍的）。这种静态嵌入资源的方式一般只适合初学者为方便开发、或小资源项目、或快速测试功能与模块时使用。</p>
         <p><strong>运行时动态加载资源：</strong></p>
         <p>通过&nbsp;Starling 的&nbsp;AssetManager 类运行时动态加载资源，可以将资源与代码分离，资源文件可以是通过网络&nbsp;URL 加载、或本地文件系统、或打包到 AIR 程序内的文件。这种方式使用内存较小，因为它只会在内存中出现一次。但编写的代码量稍稍多一些，复杂一些。</p>
         <p>首先需要指定资源的位置，如果是 AIR 程序，可以将资源文件一起打包，如果使用 MetalWorksMobileThemeWithAssetManager 类，需要以下两个文件：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          images
          <font color="#0000ff">/</font>metalworks.xml
          <br />images
          <font color="#0000ff">/</font>metalworks.png
         </div>
         <p>如下的样例代码中，需要告知主题文件，images 文件夹放在 File.applicationDirectory 中：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#c00000"><b>var</b></font>&nbsp;theme
          <font color="#0000ff">:</font>MetalWorksMobileThemeWithAssetManager&nbsp;
          <font color="#0000ff">=</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;MetalWorksMobileThemeWithAssetManager
          <font color="#0000ff">(</font>&nbsp;File.applicationDirectory.url&nbsp;
          <font color="#0000ff">)</font>;
         </div>
         <p>资源文件并不是必须放在&nbsp;File.applicationDirectory 中的，开发者也可以将资源文件放在任意子目录中。Flash Builder 和其它 IDE都可以指定打包文件的位置（既便是纯粹的命令行&nbsp;ADT 打包也可以指定）。</p>
         <p>然后为主题对象添加一个侦听器：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          theme.addEventListener
          <font color="#0000ff">(</font>&nbsp;Event.COMPLETE, theme_completeHandler&nbsp;
          <font color="#0000ff">)</font>;
         </div>
         <p>当资源管理器完成加载时，主题会派发这个事件，表现主题已经准备好为组件提供皮肤了（包括加载的纹理）。换句话说，开发者应该一直等待这个事件派发，然后才可以实例化组件显示用户界面。</p>
         <p>事件的侦听器可能如下所示：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#c00000"><b>private</b></font>&nbsp;
          <font color="#c00000"><b>function</b></font>&nbsp;theme_completeHandler
          <font color="#0000ff">(</font>&nbsp;event
          <font color="#0000ff">:</font>Event&nbsp;
          <font color="#0000ff">)</font>
          <font color="#0000ff">:</font>
          <font color="#c00000"><b>void</b></font>
          <br />
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#008080">// the theme is ready!</font>
          <br />
          <br />&nbsp;&nbsp;&nbsp;&nbsp;this.button&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Button
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;this.button.label&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#ff00ff">&quot;Click Me&quot;</font>;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;this.addChild
          <font color="#0000ff">(</font>&nbsp;button&nbsp;
          <font color="#0000ff">)</font>;
          <br />
          <font color="#0000ff">}</font>
         </div>
         <p>其它主题也一样会有类似的要资源文件需求。只需要开发者记住将主题文件当成指向的目录，如在上面的 MetalWorksMobileThemeWithAssetManager 主题例子中，指向的目录引用并不是&nbsp;images，而是它的父目录。</p>
         <p>在未末的 Feathers 版本中，这个主题可能会需要&nbsp;images 目录旁边的额外目录中的资源，因此希望保持其灵活性。例如，MinimalMobileThemeWithAssetManager 需要以下文件：&nbsp;</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          images
          <font color="#0000ff">/</font>minimal.xml
          <br />images
          <font color="#0000ff">/</font>minimal.png
          <br />fonts
          <font color="#0000ff">/</font>pf_ronda_seven.fnt
         </div>
         <p>从上面的层级可以看到，图像与字体并不在同一个目录中， 图像和字体的父目录是该主题文件的真正“根”目录。</p>
         <p><strong>使用自定义资源管理器加载资源：</strong></p>
         <p>默认情况下，主题会创建自己的资源管理器对象（AssetManager 对象）。如果开发者想加载主题文件所不知道的额外的文件，可以选择将自己创建的资源管理器传递给示例主题的构造函数：&nbsp;</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#c00000"><b>var</b></font>&nbsp;assets
          <font color="#0000ff">:</font>AssetManager&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;AssetManager
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;
          <br />assets.enqueue
          <font color="#0000ff">(</font>&nbsp;File.applicationDirectory.resolvePath
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff00ff">&quot;./images/custom-asset.png&quot;</font>&nbsp;
          <font color="#0000ff">)</font>&nbsp;
          <font color="#0000ff">)</font>;
          <br />
          <br />
          <font color="#c00000"><b>var</b></font>&nbsp;theme
          <font color="#0000ff">:</font>MetalWorksMobileThemeWithAssetManager&nbsp;
          <font color="#0000ff">=</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;MetalWorksMobileThemeWithAssetManager
          <font color="#0000ff">(</font>&nbsp;File.applicationDirectory.url, assets&nbsp;
          <font color="#0000ff">)</font>;
          <br />
          <br />theme.addEventListener
          <font color="#0000ff">(</font>&nbsp;Event.COMPLETE, theme_completeHandler&nbsp;
          <font color="#0000ff">)</font>;
         </div>
         <p>在传递到主题的构造函数前，添加任何额外需要加载的资源文件。</p>
         <p>传递给主题构造函数的&nbsp;AssetManager 对象决对不要调用&nbsp;loadQueue() 方法，因为主题对象会自动调用这个方法（Starling 的 AssetManager&nbsp;对象不会派发 Event.COMPLETE 事件给主题），当所有资源加载完成时主题会派发 Event.COMPLETE 事件。开发者如果需要知道何时资源文件被完全加载，只需在主题对象上侦听Event.COMPLETE 事件。</p>
         <div class="clear"></div> 
         <div class="infobox">
          <ul class="l">
           <li class="tag l"><b>Tags:</b> </li>
           <li class="readmore r"><a target="_blank" href="http://blog.zinewow.com/post/734.html">Read More</a></li>
          </ul>
         </div> 
        </div> 
        <div class="clear"></div> 
       </div> 
       <!--End Post--> 
       <!--Post--> 
       <div class="post cate2 auth1"> 
        <div class="calendar l">
         <p class="month">Feb</p>
         <p class="date">2</p>
        </div> 
        <div class="titlebox l"> 
         <h3><a href="http://blog.zinewow.com/post/733.html">Feathers3 “深入了解样式提供程序”的一些备注</a></h3> 
         <ul>
          <li class="comments l">0 Comments</li>
          <li class="categories l">Flash Platform</li>
         </ul> 
        </div> 
        <div class="clear"></div> 
        <div class="artbox">
         <p>样式提供程序（<a href="https://feathersui.com/help/style-providers.html" target="_blank">Style providers</a>，就是指用于设置样式的方法或函数这样的片段代码，引用这段代码程序的变量也可以称为“样式提供者”）是主题文件的基础模块，它可以为每个组件进行单独的设置样式，也可以用于全局性的样式设置，在组件实例化的时候会自动设置皮肤。</p>
         <p style="margin-left: 40px;">一般来说，大多数 Feathers 用户可能用不着看这篇贴子，基本上都是通过主题文件管理皮肤，但也可以深入的了解一样它背后的原理。</p>
         <p><strong>为同一类型的组件设置不同的皮肤样式：</strong></p>
         <p>如平时我们有多个按钮，需要有相同的外观皮肤，开发者可能就会寻找一种通用的方法，避免一次又一次的复制和粘贴皮肤相关的代码。所以 Feathers 组件支持一种被称为样式提供程序的东西，用于组件实列化的时候自动对组件设置皮肤。</p>
         <p>创建一个样式提供程序者（FunctionStyleProvider 对象）：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#c00000"><b>function</b></font>&nbsp;skinButton
          <font color="#0000ff">(</font>&nbsp;button
          <font color="#0000ff">:</font>Button&nbsp;
          <font color="#0000ff">)</font>
          <font color="#0000ff">:</font>
          <font color="#c00000"><b>void</b></font>
          <br />
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;button.defaultSkin&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Quad
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff0000">200</font>,&nbsp;
          <font color="#ff0000">60</font>, 0xcccccc&nbsp;
          <font color="#0000ff">)</font>;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;button.downSkin&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Quad
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff0000">200</font>,&nbsp;
          <font color="#ff0000">60</font>, 0x999999&nbsp;
          <font color="#0000ff">)</font>;
          <br />
          <font color="#0000ff">}</font>
          <br />
          <font color="#c00000"><b>var</b></font>&nbsp;customButtonStyles
          <font color="#0000ff">:</font>FunctionStyleProvider&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;FunctionStyleProvider
          <font color="#0000ff">(</font>&nbsp;skinButton&nbsp;
          <font color="#0000ff">)</font>;
         </div>
         <p style="margin-left: 40px;">这段代码中创建了一个方法，接受一个需要被样式化的组件。customButtonStyles 就可以被称为样式提供者，它是一个&nbsp;FunctionStyleProvider 对象；而&nbsp;skinButton() 方法被称为样式提供程序，是一个函数或方法。</p>
         <p>通知组件去使用一个样式提供者，就像设置组件的&nbsp;styleProvider 属性一样简单：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#c00000"><b>var</b></font>&nbsp;button1
          <font color="#0000ff">:</font>Button&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Button
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;
          <br />button1.label&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#ff00ff">&quot;Cancel&quot;</font>;
          <br />button1.styleProvider&nbsp;
          <font color="#0000ff">=</font>&nbsp;customButtonStyles;
          <br />this.addChild
          <font color="#0000ff">(</font>&nbsp;button1&nbsp;
          <font color="#0000ff">)</font>;
          <br />
          <br />
          <font color="#c00000"><b>var</b></font>&nbsp;button2
          <font color="#0000ff">:</font>Button&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Button
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;
          <br />button2.label&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#ff00ff">&quot;Delete&quot;</font>;
          <br />button2.styleProvider&nbsp;
          <font color="#0000ff">=</font>&nbsp;customButtonStyles;
          <br />button2.y&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#ff0000">100</font>;
          <br />this.addChild
          <font color="#0000ff">(</font>&nbsp;button2&nbsp;
          <font color="#0000ff">)</font>;
         </div>
         <p style="margin-left: 40px;">这段代码中有两个按钮，使用同一段样式提供程序，所以会有相同的皮肤。</p>
         <p><strong>自动为相同类型的组件设置皮肤：</strong></p>
         <p>在上面的代码，创建了一个&nbsp;FunctionStyleProvider 对象作为局部变量或实例变量，并简单地在两个按钮上设置 styleProvider 属性。这在只有一个类的情况下用着还行，但通常一个组件会出现在很多个其它类文件中，而且这么一个一个的高就比较麻烦了。所以我们需要一种全局性的样式提供者（global style provider）。</p>
         <p>每一个组件类（比如&nbsp;&nbsp;(Button、Slider、List 等)都会有一个静态&nbsp;globalStyleProvider 属性，在下面的示例中，我们将为所有按钮设置全局样式提供程序：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#c00000"><b>function</b></font>&nbsp;skinButton
          <font color="#0000ff">(</font>&nbsp;button
          <font color="#0000ff">:</font>Button&nbsp;
          <font color="#0000ff">)</font>
          <font color="#0000ff">:</font>
          <font color="#c00000"><b>void</b></font>
          <br />
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;button.defaultSkin&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Quad
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff0000">200</font>,&nbsp;
          <font color="#ff0000">60</font>, 0xcccccc&nbsp;
          <font color="#0000ff">)</font>;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;button.downSkin&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Quad
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff0000">200</font>,&nbsp;
          <font color="#ff0000">60</font>, 0x999999&nbsp;
          <font color="#0000ff">)</font>;
          <br />
          <font color="#0000ff">}</font>
          <br />Button.globalStyleProvider&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;FunctionStyleProvider
          <font color="#0000ff">(</font>&nbsp;skinButton&nbsp;
          <font color="#0000ff">)</font>;
         </div>
         <p>和前面一样，创建了一个&nbsp;FunctionStyleProvider 对象，但赋值给了&nbsp;Button 的静态 globalStyleProvider 属性。</p>
         <p>现在，创建按钮时，就不再需要为每个按钮单独设置 styleProvider 属性了：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#c00000"><b>var</b></font>&nbsp;button1
          <font color="#0000ff">:</font>Button&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Button
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;
          <br />button1.label&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#ff00ff">&quot;Cancel&quot;</font>;
          <br />this.addChild
          <font color="#0000ff">(</font>&nbsp;button1&nbsp;
          <font color="#0000ff">)</font>;
          <br />
          <br />
          <font color="#c00000"><b>var</b></font>&nbsp;button2
          <font color="#0000ff">:</font>Button&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Button
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;
          <br />button2.label&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#ff00ff">&quot;Delete&quot;</font>;
          <br />button2.y&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#ff0000">100</font>;
          <br />this.addChild
          <font color="#0000ff">(</font>&nbsp;button2&nbsp;
          <font color="#0000ff">)</font>;
         </div>
         <p>现在当按钮创建的时候，Feathers 会自动设置它的&nbsp;styleProvider 属性为&nbsp;Button.globalStyleProvider 的值。</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          trace
          <font color="#0000ff">(</font>&nbsp;button1.styleProvider&nbsp;
          <font color="#0000ff">==</font>&nbsp;Button.globalStyleProvider&nbsp;
          <font color="#0000ff">)</font>;&nbsp;
          <font color="#008080">//输出 true</font>
         </div>
         <p><strong>忽略单个组件的全局样式：</strong></p>
         <p>但有时候会有例外的情况，开发者并不希望使用全局样式提供程序。用自己的皮肤替换默认皮肤的最简单的方法是清除按钮的 styleProvider 属性，并从头开始：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#c00000"><b>var</b></font>&nbsp;button1
          <font color="#0000ff">:</font>Button&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Button
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;
          <br />button1.label&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#ff00ff">&quot;Click Me&quot;</font>;
          <br />
          <br />
          <font color="#008080">//不使用默认样式提供程序</font>
          <br />button1.styleProvider&nbsp;
          <font color="#0000ff">=</font>&nbsp;null;
          <br />
          <br />
          <font color="#008080">//从零开始设置新的皮肤</font>
          <br />button1.defaultSkin&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Quad
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff0000">200</font>,&nbsp;
          <font color="#ff0000">60</font>, 0xff0000&nbsp;
          <font color="#0000ff">)</font>;
          <br />button1.downSkin&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Quad
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff0000">200</font>,&nbsp;
          <font color="#ff0000">60</font>, 0x000000&nbsp;
          <font color="#0000ff">)</font>;
          <br />button1.fontStyles&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;TextFormat
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff00ff">&quot;_sans&quot;</font>,&nbsp;
          <font color="#ff0000">36</font>, 0xffffff&nbsp;
          <font color="#0000ff">)</font>;
          <br />button1.padding&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#ff0000">10</font>;
          <br />
          <br />this.addChild
          <font color="#0000ff">(</font>&nbsp;button1&nbsp;
          <font color="#0000ff">)</font>;
         </div>
         <p>现在，上面例子的按钮不再有默认的样式提供程序，所以新创建的皮肤就不会被默认样式提供程序覆盖了。styleProvider 也可以不设为 null ，而是直接传入一个新的自定义的&nbsp;FunctionStyleProvider 对象。</p>
         <p><strong>同一类型的组件使用多种不同的全局样式：</strong></p>
         <p>如果有许多个同类型的按钮组件，希望其中一个有不同的外观，可以为它们提供不同的样式提供程序，如：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#c00000"><b>function</b></font>&nbsp;skinNormalButton
          <font color="#0000ff">(</font>&nbsp;button
          <font color="#0000ff">:</font>Button&nbsp;
          <font color="#0000ff">)</font>
          <font color="#0000ff">:</font>
          <font color="#c00000"><b>void</b></font>
          <br />
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;button.defaultSkin&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Quad
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff0000">200</font>,&nbsp;
          <font color="#ff0000">60</font>, 0xcccccc&nbsp;
          <font color="#0000ff">)</font>;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;button.downSkin&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Quad
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff0000">200</font>,&nbsp;
          <font color="#ff0000">60</font>, 0x999999&nbsp;
          <font color="#0000ff">)</font>;
          <br />
          <font color="#0000ff">}</font>
          <br />
          <font color="#c00000"><b>function</b></font>&nbsp;skinWarningButton
          <font color="#0000ff">(</font>&nbsp;button
          <font color="#0000ff">:</font>Button&nbsp;
          <font color="#0000ff">)</font>
          <font color="#0000ff">:</font>
          <font color="#c00000"><b>void</b></font>
          <br />
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;button.defaultSkin&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Quad
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff0000">200</font>,&nbsp;
          <font color="#ff0000">60</font>, 0xff0000&nbsp;
          <font color="#0000ff">)</font>;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;button.downSkin&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Quad
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff0000">200</font>,&nbsp;
          <font color="#ff0000">60</font>, 0xcc0000&nbsp;
          <font color="#0000ff">)</font>;
          <br />
          <font color="#0000ff">}</font>
          <br />
          <br />
          <font color="#c00000"><b>var</b></font>&nbsp;button1
          <font color="#0000ff">:</font>Button&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Button
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;
          <br />button1.label&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#ff00ff">&quot;Cancel&quot;</font>;
          <br />button1.styleProvider&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;FunctionStyleProvider
          <font color="#0000ff">(</font>&nbsp;skinNormalButton&nbsp;
          <font color="#0000ff">)</font>;
          <br />this.addChild
          <font color="#0000ff">(</font>&nbsp;button1&nbsp;
          <font color="#0000ff">)</font>;
          <br />
          <br />
          <font color="#c00000"><b>var</b></font>&nbsp;button2
          <font color="#0000ff">:</font>Button&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Button
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;
          <br />button2.label&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#ff00ff">&quot;Delete&quot;</font>;
          <br />button2.styleProvider&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;FunctionStyleProvider
          <font color="#0000ff">(</font>&nbsp;skinWarningButton&nbsp;
          <font color="#0000ff">)</font>;
          <br />button2.y&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#ff0000">100</font>;
          <br />this.addChild
          <font color="#0000ff">(</font>&nbsp;button2&nbsp;
          <font color="#0000ff">)</font>;
         </div>
         <p>但和前面说的一样，剩下的相同外观的按钮每个设置一次，依旧会很麻烦。如果能够像前面那样直接使用一个&nbsp;Button.globalStyleProvider 全局样式提供者就可以方便很多。幸运的是，FunctionStyleProvider 并不是唯一可用的样式提供者，还有一个名为&nbsp;<a href="https://feathersui.com/api-reference/feathers/skins/StyleNameFunctionStyleProvider.html" target="_blank">StyleNameFunctionStyleProvider</a>&nbsp;类，允许为组件定义多个外观相关的样式提供程序。如：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#c00000"><b>function</b></font>&nbsp;skinNormalButton
          <font color="#0000ff">(</font>&nbsp;button
          <font color="#0000ff">:</font>Button&nbsp;
          <font color="#0000ff">)</font>
          <font color="#0000ff">:</font>
          <font color="#c00000"><b>void</b></font>
          <br />
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;button.defaultSkin&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Quad
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff0000">200</font>,&nbsp;
          <font color="#ff0000">60</font>, 0xcccccc&nbsp;
          <font color="#0000ff">)</font>;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;button.downSkin&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Quad
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff0000">200</font>,&nbsp;
          <font color="#ff0000">60</font>, 0x999999&nbsp;
          <font color="#0000ff">)</font>;
          <br />
          <font color="#0000ff">}</font>
          <br />
          <font color="#c00000"><b>function</b></font>&nbsp;skinWarningButton
          <font color="#0000ff">(</font>&nbsp;button
          <font color="#0000ff">:</font>Button&nbsp;
          <font color="#0000ff">)</font>
          <font color="#0000ff">:</font>
          <font color="#c00000"><b>void</b></font>
          <br />
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;button.defaultSkin&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Quad
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff0000">200</font>,&nbsp;
          <font color="#ff0000">60</font>, 0xff0000&nbsp;
          <font color="#0000ff">)</font>;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;button.downSkin&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Quad
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff0000">200</font>,&nbsp;
          <font color="#ff0000">60</font>, 0xcc0000&nbsp;
          <font color="#0000ff">)</font>;
          <br />
          <font color="#0000ff">}</font>
          <br />
          <br />
          <font color="#c00000"><b>var</b></font>&nbsp;buttonStyleProvider
          <font color="#0000ff">:</font>StyleNameFunctionStyleProvider&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;StyleNameFunctionStyleProvider
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;
          <br />buttonStyleProvider.defaultStyleFunction&nbsp;
          <font color="#0000ff">=</font>&nbsp;skinNormalButton;
          <br />buttonStyleProvider.setFunctionForStyleName
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff00ff">&quot;warning-button&quot;</font>, skinWarningButton&nbsp;
          <font color="#0000ff">)</font>;
          <br />Button.globalStyleProvider&nbsp;
          <font color="#0000ff">=</font>&nbsp;buttonStyleProvider;
         </div>
         <p>在上面的代码中，skinNormalButton 函数被用于&nbsp;Button 的默认皮肤设置，然后调用了 setFunctionForStyleName() 方法，将&nbsp;skinWarningButton() 函数关联到一个名为&nbsp;“warning-button” 的样式名称上。</p>
         <p>样式名称是一个字符串，用来区分同一个类型的组件不同的外观。将样式名称添加到组件的 styleNameList 属性中，如：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#c00000"><b>var</b></font>&nbsp;button1
          <font color="#0000ff">:</font>Button&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Button
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;
          <br />button1.label&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#ff00ff">&quot;Cancel&quot;</font>;
          <br />this.addChild
          <font color="#0000ff">(</font>&nbsp;button1&nbsp;
          <font color="#0000ff">)</font>;
          <br />
          <br />
          <font color="#c00000"><b>var</b></font>&nbsp;button2
          <font color="#0000ff">:</font>Button&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Button
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;
          <br />button2.label&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#ff00ff">&quot;Delete&quot;</font>;
          <br />button2.styleNameList.
          <font color="#c00000"><b>add</b></font>
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff00ff">&quot;warning-button&quot;</font>&nbsp;
          <font color="#0000ff">)</font>;
          <br />button2.y&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#ff0000">100</font>;
          <br />this.addChild
          <font color="#0000ff">(</font>&nbsp;button2&nbsp;
          <font color="#0000ff">)</font>;
         </div>
         <p>如上代码中，将 “warning-button” 样式名称添加到第二个按钮的&nbsp;styleNameList 对象中，StyleNameFunctionStyleProvider 对象会根据这个样式名称来确定第二个按钮的样式提供程序是 setWarningButtonStyles() 方法，而不是 setNormalButtonStyles() 方法。</p>
         <p style="margin-left: 40px;">为了在多个文件中输入字符串时出现“输入性的”（手误）错误时可以被编译器捕获，推荐样式名称最好定义为静态常量。</p>
         <p><strong>样式提供程序与主题文件：</strong></p>
         <p>样式提供程序是主题文件的基础模块，主题文件允许您将所有的全局样式代码合并到一个主题文件类中。 通常，当应用程序首次启动时，主题会被用于实例化。</p>
         <p>Feathers UI 库中提供的示例主题使用了 StyleNameFunctionStyleProvider 对象，为所有组件提供了样式提供程序，一些函数被传递到&nbsp;defaultStyleFunction 属性，以便在组件没有任何样式名称时提供默认样式。一些函数被传递给&nbsp;setFunctionForStyleName() 方法，与样式名关联起来。关于示例主题相关的资料参考《<a href="/post/730.html" target="_blank">“扩展示例主题”一些备注</a>》</p>
         <p><strong>词汇表：</strong></p>
         <p>样式提供程序（style provider provides）：它为组件初始化时提供皮肤化设置。</p>
         <p>全局样式提供者（global style provider）：它为同一类型的组件自动化的提供皮肤化设置。在组件初始化之前，如果有需要，可以轻松的将全局样式提供程序替换为自定义的样式提供程序。</p>
         <p>样式名称（style name）：通过在组件上设置样式名称，我们可以通知样式提供者为单个组件提供可选的皮肤化行为。</p>
         <p>主题文件（theme）：主题允许我们将所有的全局样式代码放在同一个位置（通常只在一个类中，可以在应用程序启动时用于主题实例化）。</p>
         <div class="clear"></div> 
         <div class="infobox">
          <ul class="l">
           <li class="tag l"><b>Tags:</b> </li>
           <li class="readmore r"><a target="_blank" href="http://blog.zinewow.com/post/733.html">Read More</a></li>
          </ul>
         </div> 
        </div> 
        <div class="clear"></div> 
       </div> 
       <!--End Post--> 
       <!--Post--> 
       <div class="post cate2 auth1"> 
        <div class="calendar l">
         <p class="month">Feb</p>
         <p class="date">2</p>
        </div> 
        <div class="titlebox l"> 
         <h3><a href="http://blog.zinewow.com/post/732.html">Feathers3 “创建自定义主题”一些备注</a></h3> 
         <ul>
          <li class="comments l">0 Comments</li>
          <li class="categories l">Flash Platform</li>
         </ul> 
        </div> 
        <div class="clear"></div> 
        <div class="artbox">
         <p>不少应用程序、游戏会需要完完全全全新的外观与字体，示例主题会无法满足需求。这种时候就会需要从零开始创建一个自定义主题（其实我个人还是推荐“<a href="/post/730.html" target="_blank">扩展示例主题</a>”，或者重构示例主题，示例主题中已经包含了一些组件的布局设置与“<a href="/post/397.html" target="_blank">防抖动阔值</a>”设置，删除代码比编写代码肯定要快）。</p>
         <p><strong>创建自定义主题类：</strong></p>
         <p>创建一个全新的自定义主题类，需要扩展&nbsp;<a href="https://feathersui.com/api-reference/feathers/themes/StyleNameFunctionTheme.html" target="_blank">StyleNameFunctionTheme&nbsp;</a>类：&nbsp;</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px; margin-left: 40px;">
          package
          <br />
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#c00000"><b>public</b></font>&nbsp;
          <font color="#c00000"><b>class</b></font>&nbsp;CustomTheme&nbsp;
          <font color="#c00000"><b>extends</b></font>&nbsp;StyleNameFunctionTheme
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#c00000"><b>public</b></font>&nbsp;
          <font color="#c00000"><b>function</b></font>&nbsp;CustomTheme
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#0000ff">}</font>
          <br />
          <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#c00000"><b>private</b></font>&nbsp;
          <font color="#c00000"><b>function</b></font>&nbsp;initialize
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>
          <font color="#0000ff">:</font>
          <font color="#c00000"><b>void</b></font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#0000ff">}</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#0000ff">}</font>
          <br />
          <font color="#0000ff">}</font>
         </div>
         <p style="margin-left: 40px;">添加一个&nbsp;initialize() 方法，当主题的其它部份可以用的时候填充到这个方法体内。在调用这个方法前，需要先决定资源是如何管理的：资源可以是被动态加载的或静态嵌入的。所以在资源文件没有被全部加载前，不会立即调用这个方法。</p>
         <p><strong>管理资源：</strong></p>
         <p>有两个方法可以管理主题包含的资源， 每个都有自己的优点和缺点，需要选择哪一个视具体的开发情况。</p>
         <p>第1种：静态嵌入资源。</p>
         <p style="margin-left: 40px;">在编译时嵌入资源方法最简单，这种方法可以直接实例化资源，而不需要侦听等待资源的加载相关的事件。缺点就是它需要更多的内存，在移动开发大型项目时可能会不适用，因为称动设备的内存比较有限，嵌入的资源数量会受到限制，过多的资源被静态嵌入后，启动 APP 有可能会引起一些中低端机型的 APP 闪退或无 响影。所以这种方法只适合小型项目或嵌入的资源比较少的情况。</p>
         <p style="margin-left: 40px;">在&nbsp;CustomTheme 类中嵌入纹理集（<a href="http://wiki.starling-framework.org/manual/textures_and_images#texture_atlases" target="_blank">texture atlas</a>，一个纹理集需要两个文件：一个图像文件与一个 XML 文件）：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px; margin-left: 40px;">
          <font color="#0000ff">[</font>Embed
          <font color="#0000ff">(</font>source
          <font color="#0000ff">=</font>
          <font color="#ff00ff">&quot;/../assets/images/atlas.png&quot;</font>
          <font color="#0000ff">)</font>
          <font color="#0000ff">]</font>
          <br />
          <font color="#c00000"><b>private</b></font>&nbsp;
          <font color="#c00000"><b>static</b></font>&nbsp;const ATLAS_BITMAP
          <font color="#0000ff">:</font>Class;
          <br />
          <br />
          <font color="#0000ff">[</font>Embed
          <font color="#0000ff">(</font>source
          <font color="#0000ff">=</font>
          <font color="#ff00ff">&quot;/../assets/images/atlas.xml&quot;</font>,mimeType
          <font color="#0000ff">=</font>
          <font color="#ff00ff">&quot;application/octet-stream&quot;</font>
          <font color="#0000ff">)</font>
          <font color="#0000ff">]</font>
          <br />
          <font color="#c00000"><b>private</b></font>&nbsp;
          <font color="#c00000"><b>static</b></font>&nbsp;const ATLAS_XML
          <font color="#0000ff">:</font>Class;
         </div>
         <p style="margin-left: 40px;">在主题文件中定义一个成员变量持有纹理集（<a href="http://doc.starling-framework.org/core/starling/textures/TextureAtlas.html" target="_blank">TextureAtlas</a>）的引用：&nbsp;</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px; margin-left: 40px;">
          <font color="#c00000"><b>private</b></font>&nbsp;
          <font color="#c00000"><b>var</b></font>&nbsp;atlas
          <font color="#0000ff">:</font>TextureAtlas;
         </div>
         <p style="margin-left: 40px;">然后再创建一个&nbsp;createTextureAtlas() 方法，实例化纹理后保持引用：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px; margin-left: 40px;">
          <font color="#c00000"><b>private</b></font>&nbsp;
          <font color="#c00000"><b>function</b></font>&nbsp;createTextureAtlas
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>
          <font color="#0000ff">:</font>
          <font color="#c00000"><b>void</b></font>
          <br />
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#c00000"><b>var</b></font>&nbsp;atlasTexture
          <font color="#0000ff">:</font>Texture&nbsp;
          <font color="#0000ff">=</font>&nbsp;Texture.fromEmbeddedAsset
          <font color="#0000ff">(</font>&nbsp;ATLAS_BITMAP&nbsp;
          <font color="#0000ff">)</font>;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#c00000"><b>var</b></font>&nbsp;atlasXML
          <font color="#0000ff">:</font>XML&nbsp;
          <font color="#0000ff">=</font>&nbsp;XML
          <font color="#0000ff">(</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;ATLAS_XML
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>&nbsp;
          <font color="#0000ff">)</font>;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;this.atlas&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;TextureAtlas
          <font color="#0000ff">(</font>&nbsp;atlasTexture, atlasXML&nbsp;
          <font color="#0000ff">)</font>;
          <br />
          <font color="#0000ff">}</font>
         </div>
         <p style="margin-left: 40px;">在&nbsp;CustomTheme 构造方法中调用&nbsp;createTextureAtlas() 方法，然后就可以直接调用&nbsp;initialize()。</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px; margin-left: 40px;">
          <font color="#c00000"><b>public</b></font>&nbsp;
          <font color="#c00000"><b>function</b></font>&nbsp;CustomTheme
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>
          <br />
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;super
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;this.createTextureAtlas
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;this.initialize
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;
          <br />
          <font color="#0000ff">}</font>
         </div>
         <p style="margin-left: 40px;">如果主题需要嵌入其它资源，如其它更多的纹理集、位图字体等，都类似，全部需要在&nbsp;initialize() &nbsp;方法前实例化它们。</p>
         <p>&nbsp;第2种：运行时动态加载资源。</p>
         <p style="margin-left: 40px;">Starling 的资源管理类（AssetManager 类）支持运行时动态加载资源文件（可以一次加载多个资源文件），它还提供了把位图自动转换成对应的纹理集或注册位图字体等功能。这种方式最大的好处是同样的资源数量，会比嵌入资源的方式使用更少的内存，这意味着我们可以打包入更多的资源。加载资源的缺点就是代码稍稍复杂一些，因为需要&nbsp;AssetManager 类在没有加载完资源之前，无法使用它们，所以就需要侦听加载相关的事件。</p>
         <p style="margin-left: 80px;">&nbsp;在打包 AIR 应用程序时，有时候资源文件不会被自动打包，所以需要检查一下资源是否被打勾了。</p>
         <p style="margin-left: 40px;">&nbsp;在主题类中定义两个变量，一个用于资源引用，一个用于加载资源：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px; margin-left: 40px;">
          <font color="#c00000"><b>private</b></font>&nbsp;
          <font color="#c00000"><b>var</b></font>&nbsp;atlas
          <font color="#0000ff">:</font>TextureAtlas;
          <br />
          <font color="#c00000"><b>private</b></font>&nbsp;
          <font color="#c00000"><b>var</b></font>&nbsp;assets
          <font color="#0000ff">:</font>AssetManager;
         </div>
         <p style="margin-left: 40px;">&nbsp;添加一个&nbsp;loadAssets() 方法，用于实例化&nbsp;AssetManager() 和列队需要加载的资源：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px; margin-left: 40px;">
          <font color="#c00000"><b>private</b></font>&nbsp;
          <font color="#c00000"><b>function</b></font>&nbsp;loadAssets
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>
          <font color="#0000ff">:</font>
          <font color="#c00000"><b>void</b></font>
          <br />
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;this.assets&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;AssetManager
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;this.assets.enqueue
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff00ff">&quot;atlas.png&quot;</font>&nbsp;
          <font color="#0000ff">)</font>;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;this.assets.enqueue
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff00ff">&quot;atlas.xml&quot;</font>&nbsp;
          <font color="#0000ff">)</font>;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;this.assets.loadQueue
          <font color="#0000ff">(</font>&nbsp;this.assets_onProgress&nbsp;
          <font color="#0000ff">)</font>;
          <br />
          <font color="#0000ff">}</font>
         </div>
         <p style="margin-left: 40px;">&nbsp;在末尾我们调用 AssetManager 对象的&nbsp;loadQueue() 方法开始加载资源，再加一个回调函数作为参数，可以用于判定资源的加载情况（回调函数的参数是0-1.0之间的 Number 类型）：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px; margin-left: 40px;">
          <font color="#c00000"><b>private</b></font>&nbsp;
          <font color="#c00000"><b>function</b></font>&nbsp;assets_onProgress
          <font color="#0000ff">(</font>&nbsp;progress
          <font color="#0000ff">:</font>Number&nbsp;
          <font color="#0000ff">)</font>
          <font color="#0000ff">:</font>
          <font color="#c00000"><b>void</b></font>
          <br />
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#c00000"><b>if</b></font>
          <font color="#0000ff">(</font>&nbsp;progress&nbsp;
          <font color="#0000ff">&lt;</font>&nbsp;
          <font color="#ff0000">1</font>.
          <font color="#ff0000">0</font>&nbsp;
          <font color="#0000ff">)</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#c00000"><b>return</b></font>;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#0000ff">}</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;this.atlas&nbsp;
          <font color="#0000ff">=</font>&nbsp;this.assets.getTextureAtlas
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff00ff">&quot;atlas&quot;</font>&nbsp;
          <font color="#0000ff">)</font>;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;this.initialize
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;this.dispatchEventWith
          <font color="#0000ff">(</font>&nbsp;Event.COMPLETE&nbsp;
          <font color="#0000ff">)</font>;
          <br />
          <font color="#0000ff">}</font>
         </div>
         <p style="margin-left: 40px;">当资源加载完成后，就可以从&nbsp;AssetManager 对象访问资源纹理集了（TextureAtlas 对象），通过 getTextureAtlas() 方法得到纹理集的引用赋值给主题类的实例变量保持引用（纹理集的名称不需要扩展名，所以上面直接写了 atlas，而不是 atlas.png 或 atlas.xml）。</p>
         <p style="margin-left: 40px;">资源文件加载完成后，立即调用了&nbsp;initialize() 方法，如果主题文件需要更多的资源文件，都需要在调用&nbsp;initialize() 之前加载完。</p>
         <p style="margin-left: 40px;">最后，为了通知应用程序继续执行后面的代码，派发&nbsp;Event.COMPLETE 事件：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px; margin-left: 40px;">
          this.theme&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;CustomTheme
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;
          <br />this.theme.addEventListener
          <font color="#0000ff">(</font>&nbsp;Event.COMPLETE, theme_completeHandler&nbsp;
          <font color="#0000ff">)</font>;
         </div>
         <p style="margin-left: 40px;">&nbsp;一旦侦听器被调用，应用程序中就可以开始自由的实例化组件了，主题文件会对组件自动设置样式。</p>
         <p><strong>组件样式化：</strong></p>
         <p>一旦资源文件被加载完成，就可以在应用程序中设置组件的样式化相关的函数了。在这些函数中，样式仅仅是直接简单的设置组件的属性。函数体内的代码就跟没有使用主题文件，直接通过“皮肤”设置组件的代码类似。以 Button 为例：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#c00000"><b>private</b></font>&nbsp;
          <font color="#c00000"><b>function</b></font>&nbsp;setButtonStyles
          <font color="#0000ff">(</font>&nbsp;button
          <font color="#0000ff">:</font>Button&nbsp;
          <font color="#0000ff">)</font>
          <font color="#0000ff">:</font>
          <font color="#c00000"><b>void</b></font>
          <br />
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;button.defaultSkin&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Image
          <font color="#0000ff">(</font>&nbsp;this.atlas.getTexture
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff00ff">&quot;button-up&quot;</font>&nbsp;
          <font color="#0000ff">)</font>&nbsp;
          <font color="#0000ff">)</font>;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;button.downSkin&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Image
          <font color="#0000ff">(</font>&nbsp;this.atlas.getTexture
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff00ff">&quot;button-down&quot;</font>&nbsp;
          <font color="#0000ff">)</font>&nbsp;
          <font color="#0000ff">)</font>;
          <br />
          <br />&nbsp;&nbsp;&nbsp;&nbsp;button.padding&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#ff0000">20</font>;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;button.gap&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#ff0000">15</font>;
          <br />
          <br />&nbsp;&nbsp;&nbsp;&nbsp;button.fontStyles&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;TextFormat
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff00ff">&quot;_sans&quot;</font>,&nbsp;
          <font color="#ff0000">18</font>, 0x333333&nbsp;
          <font color="#0000ff">)</font>;
          <br />
          <font color="#0000ff">}</font>
         </div>
         <p>在前面的&nbsp;initialize() 方法体内，调用一个新的&nbsp;initializeStyleProviders() 方法（下面定义）：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#c00000"><b>private</b></font>&nbsp;
          <font color="#c00000"><b>function</b></font>&nbsp;initialize
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>
          <font color="#0000ff">:</font>
          <font color="#c00000"><b>void</b></font>
          <br />
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;this.initializeStyleProviders
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;
          <br />
          <font color="#0000ff">}</font>
         </div>
         <p>initializeStyleProviders() 方法的定义，并设置样式提供程序：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#c00000"><b>private</b></font>&nbsp;
          <font color="#c00000"><b>function</b></font>&nbsp;initializeStyleProviders
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>
          <font color="#0000ff">:</font>
          <font color="#c00000"><b>void</b></font>
          <br />
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#008080">// button</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;this.getStyleProviderForClass
          <font color="#0000ff">(</font>&nbsp;Button&nbsp;
          <font color="#0000ff">)</font>.defaultStyleFunction&nbsp;
          <font color="#0000ff">=</font>&nbsp;this.setButtonStyles;
          <br />
          <font color="#0000ff">}</font>
         </div>
         <p style="margin-left: 40px;"><a href="https://feathersui.com/api-reference/feathers/themes/StyleNameFunctionTheme.html#getStyleProviderForClass()" target="_blank">getStyleProviderForClass</a>() 方法返回一个&nbsp;<a href="https://feathersui.com/api-reference/feathers/skins/StyleNameFunctionStyleProvider.html" target="_blank">StyleNameFunctionStyleProvider&nbsp;</a>对象。</p>
         <p>StyleNameFunctionStyleProvider 对象有两个主要功能，它的&nbsp;<a href="https://feathersui.com/api-reference/feathers/skins/StyleNameFunctionStyleProvider.html#defaultStyleFunction" target="_blank">defaultStyleFunction</a>&nbsp;属性会被用于一类组件的默认皮肤（用的最多的情况）。比如上面的样式代码，当我们生成一个按钮时，就会调用&nbsp;setButtonStyles() 样式化按钮。但有时候一个组件的不同风格在应用中也会出现，比如同样是按钮，可能是特别醒目，用于警告功能。<a href="https://feathersui.com/api-reference/feathers/controls/Button.html#ALTERNATE_STYLE_NAME_DANGER_BUTTON" target="_blank">Button.ALTERNATE_STYLE_NAME_DANGER_BUTTON</a>&nbsp;常量就可以用来定义一个警告按钮。在开发应用时，可以向组件添加此样式名称，以告诉主题应该采用不同的样式：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          button.styleNameList.
          <font color="#c00000"><b>add</b></font>
          <font color="#0000ff">(</font>&nbsp;Button.ALTERNATE_STYLE_NAME_DANGER_BUTTON&nbsp;
          <font color="#0000ff">)</font>;
         </div>
         <p>对应的在主题文件内，设置一个新的样式提供程序，一个名为 setDangerButtonStyles() 的方法：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#c00000"><b>private</b></font>&nbsp;
          <font color="#c00000"><b>function</b></font>&nbsp;setDangerButtonStyles
          <font color="#0000ff">(</font>&nbsp;button
          <font color="#0000ff">:</font>Button&nbsp;
          <font color="#0000ff">)</font>
          <font color="#0000ff">:</font>
          <font color="#c00000"><b>void</b></font>
          <br />
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;button.defaultSkin&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Image
          <font color="#0000ff">(</font>&nbsp;this.atlas.getTexture
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff00ff">&quot;danger-button-up&quot;</font>&nbsp;
          <font color="#0000ff">)</font>&nbsp;
          <font color="#0000ff">)</font>;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;button.downSkin&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Image
          <font color="#0000ff">(</font>&nbsp;this.atlas.getTexture
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff00ff">&quot;danger-button-down&quot;</font>&nbsp;
          <font color="#0000ff">)</font>&nbsp;
          <font color="#0000ff">)</font>;
          <br />
          <br />&nbsp;&nbsp;&nbsp;&nbsp;button.padding&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#ff0000">20</font>;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;button.gap&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#ff0000">15</font>;
          <br />
          <br />&nbsp;&nbsp;&nbsp;&nbsp;button.fontStyles&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;TextFormat
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff00ff">&quot;_sans&quot;</font>,&nbsp;
          <font color="#ff0000">18</font>, 0x333333&nbsp;
          <font color="#0000ff">)</font>;
          <br />
          <font color="#0000ff">}</font>
         </div>
         <p>在按钮的样式提供者（StyleNameFunctionStyleProvider）调用&nbsp;setFunctionForStyleName() 方法注册新的样式提供程序：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          this.getStyleProviderForClass
          <font color="#0000ff">(</font>&nbsp;Button&nbsp;
          <font color="#0000ff">)</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;.setFunctionForStyleName
          <font color="#0000ff">(</font>&nbsp;Button.ALTERNATE_STYLE_NAME_DANGER_BUTTON, this.setDangerButtonStyles&nbsp;
          <font color="#0000ff">)</font>;
         </div>
         <p style="margin-left: 40px;">&nbsp;如果一个组件拥有此样式名称，就会调用此 setDangerButtonStyles() 样式提供程序，而不会使用前面的&nbsp;setButtonStyles() 样式提供程序。</p>
         <p><strong>样式化子组件：</strong></p>
         <p>有一些组件是带有子组件的，子组件也需要样式化皮肤设置。比如，一个 Slider 组件有一个滑块，这个滑块它是一个 Button 组件。像这种子组件可以通过父组件中的样式化名称来定义区别，例如叫&nbsp;Slider.DEFAULT_CHILD_STYLE_NAME_THUMB，用来显示滑块的缩略图。</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          this.getStyleProviderForClass
          <font color="#0000ff">(</font>&nbsp;Button&nbsp;
          <font color="#0000ff">)</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;.setFunctionForStyleName
          <font color="#0000ff">(</font>&nbsp;Slider.DEFAULT_CHILD_STYLE_NAME_THUMB, this.setSliderThumbStyles&nbsp;
          <font color="#0000ff">)</font>;
         </div>
         <p>含有子组件的父组件，通常会提供一个设置子组件样式名称的属性，如果需要除默认值以外的其他值。比如一个 Slider 对象，可以设置&nbsp;<a href="https://feathersui.com/api-reference/feathers/controls/Slider.html#customThumbStyleName" target="_blank">customThumbStyleName</a>&nbsp;属性：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          slider.customThumbStyleName&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#ff00ff">&quot;custom-thumb&quot;</font>;
         </div>
         <p>&nbsp;然后，我们可以像设置其它新的样式程序一样，在主题文件中使用该自定义样式名称：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          this.getStyleProviderForClass
          <font color="#0000ff">(</font>&nbsp;Button&nbsp;
          <font color="#0000ff">)</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;.setFunctionForStyleName
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff00ff">&quot;custom-thumb&quot;</font>, this.setSliderThumbStyles&nbsp;
          <font color="#0000ff">)</font>;
         </div>
         <p><strong>设置全局性的默认值：</strong></p>
         <p>某些全局性的属性通常也是通过主题文件设置的。例如在自定义主题文件中，设置&nbsp;<a href="https://feathersui.com/api-reference/feathers/core/FeathersControl.html#defaultTextRendererFactory" target="_blank">FeathersControl.defaultTextRendererFactory&nbsp;</a>与<a href="https://feathersui.com/api-reference/feathers/core/FeathersControl.html#defaultTextEditorFactory" target="_blank">&nbsp;FeathersControl.defaultTextEditorFactory</a>&nbsp;决定 TextInput 默认的文本渲染器与编辑器（还有类似模态化的叠加层等设置往往也是全局性的默认值）</p>
         <p>创建一个&nbsp;initializeGlobals() 方法：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#c00000"><b>private</b></font>&nbsp;
          <font color="#c00000"><b>function</b></font>&nbsp;initializeGlobals
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>
          <font color="#0000ff">:</font>
          <font color="#c00000"><b>void</b></font>
          <br />
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;FeathersControl.defaultTextRendererFactory&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>function</b></font>
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>
          <font color="#0000ff">:</font>ITextRenderer
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#c00000"><b>return</b></font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;TextBlockTextRenderer
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#0000ff">}</font>;
          <br />
          <br />&nbsp;&nbsp;&nbsp;&nbsp;FeathersControl.defaultTextEditorFactory&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>function</b></font>
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>
          <font color="#0000ff">:</font>ITextEditor
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#c00000"><b>return</b></font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;StageTextTextEditor
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#0000ff">}</font>;
          <br />
          <font color="#0000ff">}</font>
         </div>
         <p>在 initialize() 方法中，在调用&nbsp;initializeStyleProviders() 方法前先调用这种全局性的设置方法：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#c00000"><b>private</b></font>&nbsp;
          <font color="#c00000"><b>function</b></font>&nbsp;initialize
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>
          <font color="#0000ff">:</font>
          <font color="#c00000"><b>void</b></font>
          <br />
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;this.initializeGlobals
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;this.initializeStyleProviders
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;
          <br />
          <font color="#0000ff">}</font>
         </div>
         <div class="clear"></div> 
         <div class="infobox">
          <ul class="l">
           <li class="tag l"><b>Tags:</b> </li>
           <li class="readmore r"><a target="_blank" href="http://blog.zinewow.com/post/732.html">Read More</a></li>
          </ul>
         </div> 
        </div> 
        <div class="clear"></div> 
       </div> 
       <!--End Post--> 
       <!--Post--> 
       <div class="post cate2 auth1"> 
        <div class="calendar l">
         <p class="month">Feb</p>
         <p class="date">1</p>
        </div> 
        <div class="titlebox l"> 
         <h3><a href="http://blog.zinewow.com/post/730.html">Feathers3 “扩展示例主题”一些备注</a></h3> 
         <ul>
          <li class="comments l">0 Comments</li>
          <li class="categories l">Flash Platform</li>
         </ul> 
        </div> 
        <div class="clear"></div> 
        <div class="artbox">
         <p>在进行移动开发的时候，个人比较推荐“<a href="https://feathersui.com/help/extending-themes.html" target="_blank">扩展示例主题</a>”，因为一个示例主题全部代码量和资源算在内只有几百KB，相对于一个 AIR SDK 打包移动APP，动则增加几十M 的容量来说，简直就是小意思了，但却能节省大量的时间。Feathers UI 库中提供的示例主题其实已经从设计时就开始考虑了扩展性，所以既便是在桌面开发中也同样推荐，会非常便于后期维护。除非是桌面 Web 型应用，并且对文件大小非常非 常的严格，那么只能从头开始完完全完的<a href="/post/732.html" target="_blank">自定义一个主题文件</a>。</p>
         <p><strong>添加替换的样式函数</strong>：</p>
         <p>假设&nbsp;MetalWorksMobileTheme 主题类符合我们大多数需求，但只有少数 UI 需要进行设整，那么就可以扩展&nbsp;MetalWorksMobileTheme 类：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          package com.example
          <br />
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#c00000"><b>import</b></font>&nbsp;feathers.themes.MetalWorksMobileTheme;
          <br />
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#c00000"><b>public</b></font>&nbsp;
          <font color="#c00000"><b>class</b></font>&nbsp;CustomTheme&nbsp;
          <font color="#c00000"><b>extends</b></font>&nbsp;MetalWorksMobileTheme
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#c00000"><b>public</b></font>&nbsp;
          <font color="#c00000"><b>function</b></font>&nbsp;CustomTheme
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#0000ff">}</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#0000ff">}</font>
          <br />
          <font color="#0000ff">}</font>
         </div>
         <p>当首次启动应用时，实例化主题类：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#c00000"><b>new</b></font>&nbsp;CustomTheme
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;
         </div>
         <p>然后，在 CustomTheme 类中添加一个 setCustomButtonStyles 方法，为按钮提供不同的皮肤（假设有个按钮需要修改皮肤）：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          protected&nbsp;
          <font color="#c00000"><b>function</b></font>&nbsp;setCustomButtonStyles
          <font color="#0000ff">(</font>&nbsp;button
          <font color="#0000ff">:</font>Button&nbsp;
          <font color="#0000ff">)</font>
          <font color="#0000ff">:</font>
          <font color="#c00000"><b>void</b></font>
          <br />
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;button.defaultSkin&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Quad
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff0000">200</font>,&nbsp;
          <font color="#ff0000">60</font>, 0xff0000&nbsp;
          <font color="#0000ff">)</font>;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;button.downSkin&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Quad
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff0000">200</font>,&nbsp;
          <font color="#ff0000">60</font>, 0x000000&nbsp;
          <font color="#0000ff">)</font>;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;button.fontStyles&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;TextFormat
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff00ff">&quot;_sans&quot;</font>,&nbsp;
          <font color="#ff0000">36</font>, 0xffffff&nbsp;
          <font color="#0000ff">)</font>;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;button.padding&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#ff0000">10</font>;
          <br />
          <font color="#0000ff">}</font>
         </div>
         <p>在它的超类中定义了一个&nbsp;initializeStyleProviders() 方法，在该方法中所有的全局样式提供者为 Feathers 组件提供了注册，所以通过覆盖该方法可以通知对应类的全局样式提供者。每一个官方示例主题都是类似的结构（如果是第三方提供的主题文件可能会有所不同）：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          override protected&nbsp;
          <font color="#c00000"><b>function</b></font>&nbsp;initializeStyleProviders
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>
          <font color="#0000ff">:</font>
          <font color="#c00000"><b>void</b></font>
          <br />
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;super.initializeStyleProviders
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;&nbsp;
          <font color="#008080">//&nbsp;别忘了这个</font>
          <br />
          <br />&nbsp;&nbsp;&nbsp;&nbsp;this.getStyleProviderForClass
          <font color="#0000ff">(</font>&nbsp;Button&nbsp;
          <font color="#0000ff">)</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.setFunctionForStyleName
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff00ff">&quot;custom-button&quot;</font>, this.setCustomButtonStyles&nbsp;
          <font color="#0000ff">)</font>;
          <br />
          <font color="#0000ff">}</font>
         </div>
         <p style="margin-left: 40px;">通过&nbsp;getStyleProviderForClass()&nbsp;方法访问 Button 类的全局样式提供者。如果全局样式提供者（global style provider）还没有被创建过，就会自动创建该对象。因为&nbsp;MetalWorksMobileTheme 类是&nbsp;StyleNameFunctionTheme 类的子类，通过&nbsp;getStyleProviderForClass() 方法返一个&nbsp;StyleNameFunctionStyleProvider 对象，该对象允许开发者将样式名称与方法关联起来，可以为同一类型的组件提供多个皮肤。</p>
         <p style="margin-left: 40px;">上面例子中调用了&nbsp;setFunctionForStyleName() 方法，并传了 “custom-button” 作为样式名称，然后将它与&nbsp;setCustomButtonStyles 方法名关联起来。</p>
         <p>接下来，对按钮的代码进行一些调整：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#c00000"><b>var</b></font>&nbsp;specialButton
          <font color="#0000ff">:</font>Button&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Button
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;
          <br />specialButton.label&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#ff00ff">&quot;Special!&quot;</font>;
          <br />specialButton.styleNameList.
          <font color="#c00000"><b>add</b></font>
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff00ff">&quot;custom-button&quot;</font>&nbsp;
          <font color="#0000ff">)</font>;
          <br />this.addChild
          <font color="#0000ff">(</font>&nbsp;specialButton&nbsp;
          <font color="#0000ff">)</font>;
         </div>
         <p>将 &nbsp;“custom-button” 字符串添加到按钮的&nbsp;styleNameList，现在按钮就会使用前面自定义的&nbsp;setCustomButtonStyles() 函数来代替 MetalWorksMobileTheme 定义的默认函数。</p>
         <p><strong>在主题文件中为自定义类提供皮肤：</strong></p>
         <p>默认情况下，自定义类会从它的超类继承样式提供程序。如创建了一个自定义的&nbsp;CustomButton 类继承了&nbsp;Button 类，子类就会自动使用&nbsp;Button.globalStyleProvider。如果希望子类拥有和父类类似的外观，那就不需要做什么。</p>
         <p>但是，如果希望子类使用与其父类不同的默认样式提供程序，则需要向组件的类中添加几个属性。 首先，它需要一个静态全局样式提供者：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#c00000"><b>public</b></font>&nbsp;
          <font color="#c00000"><b>class</b></font>&nbsp;CustomComponent&nbsp;
          <font color="#c00000"><b>extends</b></font>&nbsp;FeathersControl
          <br />
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#c00000"><b>public</b></font>&nbsp;
          <font color="#c00000"><b>static</b></font>&nbsp;
          <font color="#c00000"><b>var</b></font>&nbsp;globalStyleProvider
          <font color="#0000ff">:</font>IStyleProvider;
          <br />
          <font color="#0000ff">}</font>
         </div>
         <p>&nbsp;然后需要覆盖 defaultStyleProvider 实例方法：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          override protected&nbsp;
          <font color="#c00000"><b>function</b></font>&nbsp;
          <font color="#c00000"><b>get</b></font>&nbsp;defaultStyleProvider
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>
          <font color="#0000ff">:</font>IStyleProvider
          <br />
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#c00000"><b>return</b></font>&nbsp;CustomComponent.globalStyleProvider;
          <br />
          <font color="#0000ff">}</font>
         </div>
         <p>对绝大多数组件，defaultStyleProvider&nbsp;getter 都应该简单的返回静态全局样式提供者。</p>
         <p>默认样式提供者也是可以自定义的，例如，ToggleButton 组件在&nbsp;ToggleButton.globalStyleProvider 为 null 时就返回&nbsp;Button.globalStyleProvider：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          override protected&nbsp;
          <font color="#c00000"><b>function</b></font>&nbsp;
          <font color="#c00000"><b>get</b></font>&nbsp;defaultStyleProvider
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>
          <font color="#0000ff">:</font>IStyleProvider
          <br />
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#c00000"><b>if</b></font>
          <font color="#0000ff">(</font>&nbsp;ToggleButton.globalStyleProvider&nbsp;
          <font color="#0000ff">)</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#c00000"><b>return</b></font>&nbsp;ToggleButton.globalStyleProvider;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#0000ff">}</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#c00000"><b>return</b></font>&nbsp;Button.globalStyleProvider;
          <br />
          <font color="#0000ff">}</font>
         </div>
         <p>类似的，自定义组件也可以从超类获得可替换的默认样式提供者。</p>
         <p>要将自定义组件添加到主题文件，与前面一样，也是通过覆盖&nbsp;initializeStyleProviders() 方法：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          override protected&nbsp;
          <font color="#c00000"><b>function</b></font>&nbsp;initializeStyleProviders
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>
          <font color="#0000ff">:</font>
          <font color="#c00000"><b>void</b></font>
          <br />
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;super.initializeStyleProviders
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;&nbsp;
          <font color="#008080">//别忘了这个!</font>
          <br />
          <br />&nbsp;&nbsp;&nbsp;&nbsp;this.getStyleProviderForClass
          <font color="#0000ff">(</font>CustomComponent
          <font color="#0000ff">)</font>.defaultStyleFunction&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.setCustomComponentStyles;
          <br />
          <font color="#0000ff">}</font>
         </div>
         <p>可以在&nbsp;StyleNameFunctionStyleProvider 对象上设置&nbsp;defaultStyleFunction。如果自定义组件有可替换的备用样式，同样可以像前面介绍的那样对 Button 的全局样式提供者使用&nbsp;setFunctionForStyleName() 方法。</p>
         <div class="clear"></div> 
         <div class="infobox">
          <ul class="l">
           <li class="tag l"><b>Tags:</b> </li>
           <li class="readmore r"><a target="_blank" href="http://blog.zinewow.com/post/730.html">Read More</a></li>
          </ul>
         </div> 
        </div> 
        <div class="clear"></div> 
       </div> 
       <!--End Post--> 
       <!--Post--> 
       <div class="post cate2 auth1"> 
        <div class="calendar l">
         <p class="month">Feb</p>
         <p class="date">1</p>
        </div> 
        <div class="titlebox l"> 
         <h3><a href="http://blog.zinewow.com/post/729.html">Feathers3 “主题”（themes）的一些备注</a></h3> 
         <ul>
          <li class="comments l">0 Comments</li>
          <li class="categories l">Flash Platform</li>
         </ul> 
        </div> 
        <div class="clear"></div> 
        <div class="artbox">
         <p>Feathers 主题或者主题文件（<a href="https://feathersui.com/help/themes.html" target="_blank">themes</a>）是一个类，集中在同一个文件位置实现多个组件的皮肤样式设置与管理。在主题文件中提供的样式是全局的，任何 Feathers&nbsp;组件初始化的时候，会自动设置样式。在应用开发时使用主题文件是非常容易、方便和有用的，它可以使用相同的样式皮肤化任何组件。如果想要特殊化一个组件的样式，而不同于默认全局的样式，也可以非常方便的从主题文件中“排除”，如果喜欢默认样式，但想有一些微小的调整，都可以轻松实现。</p>
         <p>主题文件并不是必须的，可以通过&nbsp;Feathers 组件直接逐个的设置每个组件的样式属性。但使用主题文件会带来很大的好处，就是可以将皮肤样式外观的设置集中到一处，而不会影响其它具体的业务逻辑，减少代码混乱。也可以使用预制的主题（样例主题），进行前期的快速功能开发，后期再调换成自己设计的主题，对其余的部份不会有什么影响。</p>
         <p><strong>初始化主题：</strong></p>
         <p>使用 Feathers UI 库中的示例主题&nbsp;MetalWorksMobileTheme 类为例，在 Starling 的根容器中立即实例化主题：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#c00000"><b>import</b></font>&nbsp;starling.display.Sprite;
          <br />
          <font color="#c00000"><b>import</b></font>&nbsp;feathers.themes.MetalWorksMobileTheme;
          <br />
          <br />
          <font color="#c00000"><b>public</b></font>&nbsp;
          <font color="#c00000"><b>class</b></font>&nbsp;Main&nbsp;
          <font color="#c00000"><b>extends</b></font>&nbsp;Sprite
          <br />
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#c00000"><b>public</b></font>&nbsp;
          <font color="#c00000"><b>function</b></font>&nbsp;Main
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;MetalWorksMobileTheme
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#0000ff">}</font>
          <br />
          <font color="#0000ff">}</font>
         </div>
         <p style="margin-left: 40px;">实例化主题的代码在&nbsp;super() 方法前，如有必要情况，主题就可以对根容器也进行皮肤样式化处理（根容器不一定就是直接扩展&nbsp;Starling 的 Sprite 类，可能就是实现了一个自定义的 Feathers 组件）。</p>
         <p>此后，当 Feathers 组件被 addChild 到舞台时，主题文件就会自动检测添加的组件，自动给组件添加皮肤。</p>
         <p><strong>自定义特定组件实例：</strong></p>
         <p>1、如果使用主题文件，那么最好将样式化相关的代码都放在主题文件内（脱藕性），但也可以在任何组件上自定义样式，以使其与默认的皮肤样式不同。如自定义一个按钮的标签字体样式：&nbsp;</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#c00000"><b>var</b></font>&nbsp;button
          <font color="#0000ff">:</font>Button&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Button
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;
          <br />button.label&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#ff00ff">&quot;Click Me&quot;</font>;
          <br />button.fontStyles&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;TextFormat
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff00ff">&quot;_sans&quot;</font>,&nbsp;
          <font color="#ff0000">20</font>, 0x4c4c4c&nbsp;
          <font color="#0000ff">)</font>;
          <br />this.addChild
          <font color="#0000ff">(</font>button
          <font color="#0000ff">)</font>;
         </div>
         <p style="margin-left: 40px;">如上代码，样例按钮的背景皮肤、padding 等会按着主题文件中的样式进行设置，但 fontStyles 会以这个自定义的&nbsp;starling.text.TextFormat 样式进行设置。</p>
         <p>相比较而言，在旧版本的&nbsp;Feathers 中，在主题文件外自定义样式有一些麻烦。如上面的代码，这样直接简单的设置样式有可能会被主题文件替换。<span style="background-color: rgb(255, 255, 153);">但从&nbsp;Feathers 3.1 开始，这样直接设置样式属性不会再和主题文件中的代码冲突。</span><img src="http://blog.zinewow.com/image/face/shocked.gif" alt="" /></p>
         <p>2、还有一些情况，某个组件就是不想使用主题文件中的任何样式，是完完全全自定义的。有下面几种方法可以实现：</p>
         <p style="margin-left: 40px;">a、清除样式提供者。最直接暴力的方法就是将&nbsp;styleProvider 属性设为 null，告诉组件不使用主题。</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px; margin-left: 80px;">
          <font color="#c00000"><b>var</b></font>&nbsp;button
          <font color="#0000ff">:</font>Button&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Button
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;
          <br />button.styleProvider&nbsp;
          <font color="#0000ff">=</font>&nbsp;null;&nbsp;
          <font color="#008080">//不使用主题文件中的代码!</font>
          <br />button.label&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#ff00ff">&quot;Click Me&quot;</font>;
          <br />button.fontStyles&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;TextFormat
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff00ff">&quot;_sans&quot;</font>,&nbsp;
          <font color="#ff0000">20</font>, 0x4c4c4c&nbsp;
          <font color="#0000ff">)</font>;
          <br />button.defaultSkin&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Quad
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff0000">100</font>,&nbsp;
          <font color="#ff0000">30</font>, 0xcccccc&nbsp;
          <font color="#0000ff">)</font>;
          <br />button.padding&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#ff0000">10</font>;
          <br />this.addChild
          <font color="#0000ff">(</font>button
          <font color="#0000ff">)</font>;
         </div>
         <p style="margin-left: 80px;">当 styleProvider 属性设为 null 时，按钮的所有样式属性如背景纹理、padding、 layouts、字体等等都需要手动设置了，因为它不会再接受主题文件中的样式代码。</p>
         <p style="margin-left: 40px;">b、使用扩展的自定义样式名称（相对于前面的方法，这是比较推荐的方法）。这通常会涉及到<a href="/post/730.html" target="_blank">主题类的扩展</a>，将皮肤样式相关的代码集中放在主题文件中，可以让代码更清晰。</p>
         <p><strong>内置的可交替使用的（备用）样式名称（</strong><b>Built-in alternate style names</b><strong>）：</strong></p>
         <p>一些组件提供了一组内置的备用样式名称（style names），样式名称可以被添加到&nbsp;styleNameList 属性中，用以通知主题文件特定实例的皮肤与默认的皮肤应该有所不同。备用的皮肤在不改变组件功能的基础上，用以在视觉上区分组件实例。例如，希望某个按钮比其它按钮更明显，给它一个名为“call-to-action”的样式名称，让主题给它更明显的颜色用以在视觉上区分其它按钮。</p>
         <p>另一个例子，如&nbsp;GroupedList 组件有一个标准的普通外观皮肤，看起来就像是&nbsp;List 组件，但它有&nbsp;headers 与&nbsp;footers。还有一个 “inset” 样式，控制组中第一个和最后一个项渲染器的外观带有圆角。如果希望观看两种不同的风格样式，可以在&nbsp;<a href="https://feathersui.com/examples/components-explorer/" target="_blank">Component Explorer</a>&nbsp;中浏览&nbsp;GroupedList 组件。</p>
         <p style="margin-left: 40px;"><a href="https://feathersui.com/examples/components-explorer/" target="_blank">Component Explorer</a>&nbsp;是类似 Feathers 移动版本的组件 DEMO，使用了 MetalWorksMobileTheme 主题。</p>
         <p>备用的样式名称一般是直接在组件定义的类上定义为 public 的静态常量，如&nbsp;GroupedList 类定义了&nbsp;ALTERNATE_STYLE_NAME_INSET_GROUPED_LIST 常量。inset 样式就可以被添加到&nbsp;styleNameList 中，如：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#c00000"><b>var</b></font>&nbsp;list
          <font color="#0000ff">:</font>GroupedList&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;GroupedList
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;
          <br />list.styleNameList.
          <font color="#c00000"><b>add</b></font>
          <font color="#0000ff">(</font>&nbsp;GroupedList.ALTERNATE_STYLE_NAME_INSET_GROUPED_LIST&nbsp;
          <font color="#0000ff">)</font>;
          <br />this.addChild
          <font color="#0000ff">(</font>&nbsp;list&nbsp;
          <font color="#0000ff">)</font>;
         </div>
         <p>如果正在使用的主题文件没有为组件的备用样式名称提供对应的皮肤，组件并不会因为找不到皮肤而看不到或产生异常，而是主题会自动回退到显示默认的皮肤。主题文件的程序员并不需要编写特别的代码，它已经是主题系统的核心部分。这样只是为了确保开发者在切换不同的主题文件时，可以让组件的功能正常运行，而不产生问题。如果自定义自己的主题文件，确保为每个备用样式名称提供对应的皮肤是最好的做法。</p>
         <p><strong>文件大小警告：</strong></p>
         <p>示例主题文件包含了每个可用的 feathers 组件，这意味着如果使用示例主题文件，所有的羽毛组件不管用到的还是没用到的都将被编译到正在开发的应用中去。如果要保存文件大小，应该考虑修改主题文件的源代码，以删除项目中未使用的所有组件的引用。另一种更好的方式就是完完全全的从头开始创建一个<a href="/post/732.html" target="_blank">自定义的主题文件</a>。</p>
         <div class="clear"></div> 
         <div class="infobox">
          <ul class="l">
           <li class="tag l"><b>Tags:</b> </li>
           <li class="readmore r"><a target="_blank" href="http://blog.zinewow.com/post/729.html">Read More</a></li>
          </ul>
         </div> 
        </div> 
        <div class="clear"></div> 
       </div> 
       <!--End Post--> 
       <!--Post--> 
       <div class="post cate2 auth1"> 
        <div class="calendar l">
         <p class="month">Feb</p>
         <p class="date">1</p>
        </div> 
        <div class="titlebox l"> 
         <h3><a href="http://blog.zinewow.com/post/728.html">Feathers3 皮肤资料备注</a></h3> 
         <ul>
          <li class="comments l">0 Comments</li>
          <li class="categories l">Flash Platform</li>
         </ul> 
        </div> 
        <div class="clear"></div> 
        <div class="artbox">
         <p>所有的&nbsp;Feathers 组件都支持大量的样式属性以允许用户自定义设计。许多组件包含了多个状态的背景皮肤属性，还有不同的布局属性，如&nbsp;padding、alignment、字体样式等。此外，还有一些组件在移动开发或桌面开发时分别会有不同的选项。</p>
         <p>实际上&nbsp;<a href="https://feathersui.com/help/faq/default-skins.html" target="_blank">Feathers 没有默认皮肤</a>，它鼓励开发者自己开发设计独一无二的皮肤外观。但也为了方便开发者，Feathers 提供了几个不同风格的<a href="https://feathersui.com/help/themes.html" target="_blank">示例主题</a>，如果有必要或为了方便开发，开发者也可以<a href="https://feathersui.com/help/extending-themes.html" target="_blank">直接扩展这些示例主题</a>自定义不同的皮肤。</p>
         <p><strong>基本资料：</strong></p>
         <p>所有的皮肤、布局选项、字体样式等其它有用的样式属性，都是以&nbsp;public 的属性方式提供了 API。自定义样式化的皮肤和布局时就像设置属性一样简单。以一个按钮为例：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#c00000"><b>var</b></font>&nbsp;button
          <font color="#0000ff">:</font>Button&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Button
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;
          <br />button.label&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#ff00ff">&quot;Click Me&quot;</font>;
          <br />button.defaultSkin&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Quad
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff0000">100</font>,&nbsp;
          <font color="#ff0000">30</font>, 0xc4c4c4&nbsp;
          <font color="#0000ff">)</font>;
          <br />button.fontStyles&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;TextFormat
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff00ff">&quot;Helvetica&quot;</font>,&nbsp;
          <font color="#ff0000">20</font>, 0x3c3c3c&nbsp;
          <font color="#0000ff">)</font>;
          <br />this.addChild
          <font color="#0000ff">(</font>&nbsp;button&nbsp;
          <font color="#0000ff">)</font>;
         </div>
         <p style="margin-left: 40px;">这里只是一个基本示例，还有其它更多的布局或图标相关的样式属性，可以参考具体的 API 手册。其中， starling.text.TextFormat 可以为任何 Feathers 组件用于自定义字体样式，无论是使用位图字体、嵌入字体或设备字体等。</p>
         <p><strong>组件有多个状态</strong>：</p>
         <p>有些组件类似&nbsp;Button、TextInput 等有多个状态，可以为不同的状态设置不同的皮肤外观。比如通过&nbsp;setTextureForState() 设置不同状态时的背景皮肤纹理：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#c00000"><b>var</b></font>&nbsp;skin
          <font color="#0000ff">:</font>ImageSkin&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;ImageSkin
          <font color="#0000ff">(</font>&nbsp;upTexture&nbsp;
          <font color="#0000ff">)</font>;
          <br />skin.setTextureForState
          <font color="#0000ff">(</font>&nbsp;ButtonState.DOWN, downTexture&nbsp;
          <font color="#0000ff">)</font>;
          <br />button.defaultSkin&nbsp;
          <font color="#0000ff">=</font>&nbsp;skin;
         </div>
         <p style="margin-left: 40px;">传递一个默认皮肤纹理给&nbsp;ImageSkin 构造函数，然后再通过 setTextureForState() 方法设置不同状态的纹理。如果我们没有为某个状态设置皮肤纹理，那么默认的皮肤纹理就会被使用，比如上面的代码中没有设置 HOVER 状态的皮肤，那么 HOVER 状态时就会显示默认的皮肤纹理。如果要设转上老母一个状态，可能类似的代码如下面这样子：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px; margin-left: 40px;">
          <font color="#c00000"><b>var</b></font>&nbsp;skin
          <font color="#0000ff">:</font>ImageSkin&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;ImageSkin
          <font color="#0000ff">(</font>&nbsp;upTexture&nbsp;
          <font color="#0000ff">)</font>;
          <br />skin.setTextureForState
          <font color="#0000ff">(</font>&nbsp;ButtonState.DOWN, downTexture&nbsp;
          <font color="#0000ff">)</font>;
          <br />skin.setTextureForState
          <font color="#0000ff">(</font>&nbsp;ButtonState.HOVER, hoverTexture&nbsp;
          <font color="#0000ff">)</font>;
          <br />skin.setTextureForState
          <font color="#0000ff">(</font>&nbsp;ButtonState.DISABLED, disabledTexture&nbsp;
          <font color="#0000ff">)</font>;
          <br />button.defaultSkin&nbsp;
          <font color="#0000ff">=</font>&nbsp;skin;
         </div>
         <p>和上面设置不同状态的纹理类似，可以通过 setFontStylesForState() 方法设置不同状态的字体样式。</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px; margin-left: 40px;">
          <font color="#c00000"><b>var</b></font>&nbsp;upFontStyles
          <font color="#0000ff">:</font>TextFormat&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;TextFormat
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff00ff">&quot;Helvetica&quot;</font>,&nbsp;
          <font color="#ff0000">20</font>, 0x3c3c3c&nbsp;
          <font color="#0000ff">)</font>;
          <br />
          <font color="#c00000"><b>var</b></font>&nbsp;downFontStyles
          <font color="#0000ff">:</font>TextFormat&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;TextFormat
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff00ff">&quot;Helvetica&quot;</font>,&nbsp;
          <font color="#ff0000">20</font>, 0xff0000&nbsp;
          <font color="#0000ff">)</font>;
          <br />
          <br />button.fontStyles&nbsp;
          <font color="#0000ff">=</font>&nbsp;upFontStyles;
          <br />button.setFontStylesForState
          <font color="#0000ff">(</font>&nbsp;ButtonState.DOWN, downFontStyles&nbsp;
          <font color="#0000ff">)</font>;
         </div>
         <p style="margin-left: 40px;">如上代码中，fontStyles 是默认的字体样式，而&nbsp;setFontStylesForState() 方法可以自定义不同状态的字体样式（new 一个 TextFormat 即可）。</p>
         <p><strong>设置子组件的外观皮肤样式：</strong></p>
         <p>一些“复杂的” Feathers&nbsp;组件会包含其它 Feathers 组件作为子组件。例如一个&nbsp;<a href="https://feathersui.com/help/panel.html" target="_blank">Panel&nbsp;</a>组件，包含了一个&nbsp;header 对象，像这样的 header&nbsp;子组件是可以设置样式的，但它的样式属性并不会直接通过父组件直接暴露给开发者。</p>
         <p>样式化一个子组件比较简单的方法是自定义工厂方法，直接返回一个样式化的子组件，如 Panel 的 header 对象是通过 headerFactory 属性的工厂方法创建的：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#c00000"><b>var</b></font>&nbsp;panel
          <font color="#0000ff">:</font>Panel&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Panel
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;
          <br />panel.headerFactory&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>function</b></font>
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>
          <font color="#0000ff">:</font>IFeathersControl
          <br />
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#c00000"><b>var</b></font>&nbsp;header
          <font color="#0000ff">:</font>Header&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Header
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;header.backgroundSkin&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Quad
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff0000">200</font>,&nbsp;
          <font color="#ff0000">50</font>, 0x3c3c3c&nbsp;
          <font color="#0000ff">)</font>;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;header.fontStyles&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;TextFormat
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff00ff">&quot;Helvetica&quot;</font>,&nbsp;
          <font color="#ff0000">20</font>, 0xd4d4d4&nbsp;
          <font color="#0000ff">)</font>;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#c00000"><b>return</b></font>&nbsp;header;
          <br />
          <font color="#0000ff">}</font>;
          <br />this.addChild
          <font color="#0000ff">(</font>&nbsp;panel&nbsp;
          <font color="#0000ff">)</font>;
         </div>
         <p>&nbsp;如果开发者正在使用一个<a href="https://feathersui.com/help/themes.html" target="_blank">主题（ theme） 文件</a>，可能会希望将皮肤样式外观有关的代码都放在主题文件中，那样的话就不推荐使用生成子组件的工厂方法，而应该为子组件创建新的样式名称，然后将代码移动到主题文件中。</p>
         <p>复杂的组件允许开发者自定义子组件的样式名称。在这个&nbsp;Panel 的例子中，可以设置&nbsp;<a href="https://feathersui.com/api-reference/feathers/controls/Panel.html#customHeaderStyleName" target="_blank">customHeaderStyleName</a>&nbsp;属性，如：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#c00000"><b>var</b></font>&nbsp;panel
          <font color="#0000ff">:</font>Panel&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Panel
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;
          <br />panel.customHeaderStyleName&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#ff00ff">&quot;custom-panel-header&quot;</font>;
          <br />this.addChild
          <font color="#0000ff">(</font>&nbsp;panel&nbsp;
          <font color="#0000ff">)</font>;
         </div>
         <p>&nbsp;在主题文件中，创建一个对应的方法用于对子组件进行样式化设置：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#c00000"><b>private</b></font>&nbsp;
          <font color="#c00000"><b>function</b></font>&nbsp;setCustomPanelHeaderStyles
          <font color="#0000ff">(</font>&nbsp;header
          <font color="#0000ff">:</font>Header&nbsp;
          <font color="#0000ff">)</font>
          <font color="#0000ff">:</font>
          <font color="#c00000"><b>void</b></font>
          <br />
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;header.backgroundSkin&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Quad
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff0000">200</font>,&nbsp;
          <font color="#ff0000">50</font>, 0x3c3c3c&nbsp;
          <font color="#0000ff">)</font>;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;header.fontStyles&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;TextFormat
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff00ff">&quot;Helvetica&quot;</font>,&nbsp;
          <font color="#ff0000">20</font>, 0xd4d4d4&nbsp;
          <font color="#0000ff">)</font>;
          <br />
          <font color="#0000ff">}</font>
         </div>
         <p>&nbsp;最后“告诉”主题文件，当子组件有自定义的样式名称时，对应的调用哪个方法：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          getStyleProviderForClass
          <font color="#0000ff">(</font>&nbsp;Header&nbsp;
          <font color="#0000ff">)</font>.setFunctionForStyleName
          <font color="#0000ff">(</font>&nbsp;
          <font color="#ff00ff">&quot;custom-panel-header&quot;</font>, setCustomPanelHeaderStyles&nbsp;
          <font color="#0000ff">)</font>;
         </div>
         <div class="clear"></div> 
         <div class="infobox">
          <ul class="l">
           <li class="tag l"><b>Tags:</b> </li>
           <li class="readmore r"><a target="_blank" href="http://blog.zinewow.com/post/728.html">Read More</a></li>
          </ul>
         </div> 
        </div> 
        <div class="clear"></div> 
       </div> 
       <!--End Post--> 
       <!--Post--> 
       <div class="post cate2 auth1"> 
        <div class="calendar l">
         <p class="month">Feb</p>
         <p class="date">1</p>
        </div> 
        <div class="titlebox l"> 
         <h3><a href="http://blog.zinewow.com/post/727.html">Feathers3 &quot;Tool-tips&quot; 一些备注</a></h3> 
         <ul>
          <li class="comments l">0 Comments</li>
          <li class="categories l">Flash Platform</li>
         </ul> 
        </div> 
        <div class="clear"></div> 
        <div class="artbox">
         <p><a href="https://feathersui.com/help/tool-tips.html" target="_blank">Tool-tips</a>&nbsp;（提示功能）最常见的情况是在桌面开发的应用中，当鼠标悬停在某个 UI 按钮上面时，会出现一个提示文本。Feathers 也可提供了这样的功能，通过&nbsp;<a href="https://feathersui.com/api-reference/feathers/core/ToolTipManager.html" target="_blank">ToolTipManager</a>&nbsp;可以方便的实现。（虽然移动开发也能使用，但移动设备因为没有鼠标指针，所以一般不会用这样的功能，就算用了在一般情况下也是看不到提示的）。</p>
         <p><strong>启用&nbsp;Tool-Tip Manager：</strong></p>
         <p>要启用提示功能，应用首次启动时只需要一行代码：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          ToolTipManager.setEnabledForStage
          <font color="#0000ff">(</font>&nbsp;this.stage, true&nbsp;
          <font color="#0000ff">)</font>;
         </div>
         <p>然后只需要设置组件的&nbsp;<a href="https://feathersui.com/api-reference/feathers/core/FeathersControl.html#toolTip" target="_blank">toolTip&nbsp;</a>属性即可。如果开发的是一个桌面 AIR 程序，具有多个窗口，每个窗口都有一个独立的舞台对象，所以需要为每个应用窗口单独调用 setEnabledForStage() 方法。&nbsp;&nbsp;</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px;">
          <font color="#c00000"><b>var</b></font>&nbsp;button
          <font color="#0000ff">:</font>Button&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;Button
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;
          <br />button.label&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#ff00ff">&quot;Click Me&quot;</font>;
          <br />button.toolTip&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#ff00ff">&quot;Some useful information&quot;</font>;
         </div>
         <p>所有的&nbsp;Feathers 组件都有一个&nbsp;<a href="https://feathersui.com/api-reference/feathers/core/FeathersControl.html#toolTip" target="_blank">toolTip</a>&nbsp;属性。</p>
         <div class="clear"></div> 
         <div class="infobox">
          <ul class="l">
           <li class="tag l"><b>Tags:</b> </li>
           <li class="readmore r"><a target="_blank" href="http://blog.zinewow.com/post/727.html">Read More</a></li>
          </ul>
         </div> 
        </div> 
        <div class="clear"></div> 
       </div> 
       <!--End Post--> 
       <!--Post--> 
       <div class="post cate2 auth1"> 
        <div class="calendar l">
         <p class="month">Feb</p>
         <p class="date">1</p>
        </div> 
        <div class="titlebox l"> 
         <h3><a href="http://blog.zinewow.com/post/726.html">Feathers3 “Drag 与 Drop” 一些备注</a></h3> 
         <ul>
          <li class="comments l">0 Comments</li>
          <li class="categories l">Flash Platform</li>
         </ul> 
        </div> 
        <div class="clear"></div> 
        <div class="artbox">
         <p>Feathers 提供了拖放管理器（<a href="https://feathersui.com/api-reference/feathers/dragDrop/DragDropManager.html" target="_blank">DragDropManager</a>&nbsp;）提供拖放功能（Drag 与 Drop 功能， 也被简称为 “D&amp;D” 功能，如果有使用过&nbsp;Flex 的 D&amp;D 功能，应该会很熟悉基本流程）。基本流程如下：</p>
         <p>1、首先需要在对应的对象上实现&nbsp;IDragSource 与&nbsp;IDropTarget 接口。</p>
         <p>2、调用&nbsp;<a href="https://feathersui.com/api-reference/feathers/dragDrop/DragDropManager.html#startDrag()" target="_blank">DragDropManager.startDrag()</a>&nbsp;方法：</p>
         <p style="margin-left: 40px;">传入第一个参数是 IDragSource 对象。</p>
         <p style="margin-left: 40px;">第二个参数是启动拖动操作的&nbsp;<a href="http://doc.starling-framework.org/core/starling/events/Touch.html" target="_blank">Touch</a>&nbsp;对象。</p>
         <p style="margin-left: 40px;">第三个参数是&nbsp;<a href="https://feathersui.com/api-reference/feathers/dragDrop/DragData.html" target="_blank">DragData</a>&nbsp;对象，它存储正在拖动的数据，可以指定数据格式，用于指定不同的目标可以接受不同的数据类型。</p>
         <p>3、当被拖动的对象经过 IDropTarget 对象时，IDropTarget 对象会派发&nbsp;<a href="https://feathersui.com/api-reference/feathers/events/DragDropEvent.html#DRAG_ENTER" target="_blank">DragDropEvent.DRAG_ENTER</a>&nbsp;事件时（DragDropManager 会自动派发这个事件，开发者只需要侦听这个事件就可以），DragData 包含了目标对象可以接受的数据格式，会调用&nbsp;<a href="https://feathersui.com/api-reference/feathers/dragDrop/DragDropManager.html#acceptDrag()" target="_blank">DragDropManager.acceptDrag()&nbsp;</a>方法。</p>
         <p>4、如果用户在 IDropTarget 对象上面有释放操作（比如停止触摸或释放鼠标），IDropTarget 对象会派发&nbsp;<a href="https://feathersui.com/api-reference/feathers/events/DragDropEvent.html#DRAG_DROP" target="_blank">DragDropEvent.DRAG_DROP&nbsp;</a>事件，如果正是需要的目标对象，需要在侦听器中处理释放（Drop）操作。</p>
         <p>5、无论释放操作是否在需要的目标对象上，IDragSource 对象都会派发&nbsp;<a href="https://feathersui.com/api-reference/feathers/events/DragDropEvent.html#DRAG_COMPLETE" target="_blank">DragDropEvent.DRAG_COMPLETE</a>&nbsp;事件，事件对象的&nbsp;isDropped 属性是会指示出释放操作是否成功。如果数据需要在释放操作后被删除，就可以在侦听器中处理，检查&nbsp;isDropped 属性是否是成功的接受了释放对象，还是取消了。</p>
         <p>当在调用&nbsp;DragDropManager.startDrag() 方法时，可以使用一个具体的图像作为拖动数据的“代理显示”。在拖动行为过程中这个图像会跟随着手指或鼠标移动。</p>
         <p>数据格式类似是在拖动对象与目标对象之间的一种契约协议，可能是代理显示的图像，也可能是纯粹的数据项，比如 List 对象中的项数据。如果只是简单的拖动一个显示对象（没有任何其它数据关联），开发者可以将显示对象作为拖动“数据”，类似代码：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px; margin-left: 40px;">
          <font color="#c00000"><b>var</b></font>&nbsp;dragData
          <font color="#0000ff">:</font>DragData&nbsp;
          <font color="#0000ff">=</font>&nbsp;
          <font color="#c00000"><b>new</b></font>&nbsp;DragData
          <font color="#0000ff">(</font>
          <font color="#0000ff">)</font>;
          <br />dragData.setDataForFormat
          <font color="#0000ff">(</font>
          <font color="#ff00ff">&quot;display-object-drag-format&quot;</font>, theDisplayObject
          <font color="#0000ff">)</font>;
         </div>
         <p style="margin-left: 40px;">可以使用任意的字符串“display-object-drag-format”，只需要拖动源与释放目标能相互识别即可：</p>
         <p style="margin-left: 40px;">在&nbsp;&nbsp;DragDropEvent.DRAG_ENTER 事件中，检测是否可以接受被拖动的对象：</p>
         <div style="border-width: 1px; border-style: solid; border-color: rgb(153, 153, 153); font-family: &quot;Courier New&quot;; background: rgb(231, 255, 247); padding: 6px; margin-left: 40px;">
          <font color="#c00000"><b>function</b></font>
          <font color="#0000ff">(</font>event
          <font color="#0000ff">:</font>DragDropEvent, dragData
          <font color="#0000ff">:</font>DragData
          <font color="#0000ff">)</font>
          <font color="#0000ff">:</font>
          <font color="#c00000"><b>void</b></font>
          <br />
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#c00000"><b>if</b></font>
          <font color="#0000ff">(</font>dragData.hasDataForFormat
          <font color="#0000ff">(</font>
          <font color="#ff00ff">&quot;display-object-drag-format&quot;</font>
          <font color="#0000ff">)</font>
          <font color="#0000ff">)</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#0000ff">{</font>
          <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DragDropManager.acceptDrag
          <font color="#0000ff">(</font>this
          <font color="#0000ff">)</font>;
          <br />&nbsp;&nbsp;&nbsp;&nbsp;
          <font color="#0000ff">}</font>
          <br />
          <font color="#0000ff">}</font>
         </div>
         <blockquote>
          <p>在&nbsp;DragDropEvent.DRAG_DROP 事件侦听器中，使用&nbsp;dragData.getDataForFormat() 方法来检索显示对象或其它数据。</p>
         </blockquote>
         <div class="clear"></div> 
         <div class="infobox">
          <ul class="l">
           <li class="tag l"><b>Tags:</b> </li>
           <li class="readmore r"><a target="_blank" href="http://blog.zinewow.com/post/726.html">Read More</a></li>
          </ul>
         </div> 
        </div> 
        <div class="clear"></div> 
       </div> 
       <!--End Post--> 
       <div class="clear"></div> 
       <div class="bottompagebar pagebar">
        <a href="http://blog.zinewow.com/catalog.asp?tags=%E4%B8%AD%E5%9B%BD%E7%A6%8F%E5%88%A9%E5%BD%A9%E7%A5%A8%E5%8F%8C%E8%89%B2%E7%90%832014064%E6%9C%9F%E3%80%90%E9%AB%98%E6%89%8B2l74%E2%92%8Al%5BQ%5D%E3%80%91&amp;page=1">&laquo;</a>
        <span class="now-page">2</span>
        <a href="http://blog.zinewow.com/catalog.asp?tags=%E4%B8%AD%E5%9B%BD%E7%A6%8F%E5%88%A9%E5%BD%A9%E7%A5%A8%E5%8F%8C%E8%89%B2%E7%90%832014064%E6%9C%9F%E3%80%90%E9%AB%98%E6%89%8B2l74%E2%92%8Al%5BQ%5D%E3%80%91&amp;page=3">3</a>
        <a href="http://blog.zinewow.com/catalog.asp?tags=%E4%B8%AD%E5%9B%BD%E7%A6%8F%E5%88%A9%E5%BD%A9%E7%A5%A8%E5%8F%8C%E8%89%B2%E7%90%832014064%E6%9C%9F%E3%80%90%E9%AB%98%E6%89%8B2l74%E2%92%8Al%5BQ%5D%E3%80%91&amp;page=4">4</a>
        <a href="http://blog.zinewow.com/catalog.asp?tags=%E4%B8%AD%E5%9B%BD%E7%A6%8F%E5%88%A9%E5%BD%A9%E7%A5%A8%E5%8F%8C%E8%89%B2%E7%90%832014064%E6%9C%9F%E3%80%90%E9%AB%98%E6%89%8B2l74%E2%92%8Al%5BQ%5D%E3%80%91&amp;page=5">5</a>
        <a href="http://blog.zinewow.com/catalog.asp?tags=%E4%B8%AD%E5%9B%BD%E7%A6%8F%E5%88%A9%E5%BD%A9%E7%A5%A8%E5%8F%8C%E8%89%B2%E7%90%832014064%E6%9C%9F%E3%80%90%E9%AB%98%E6%89%8B2l74%E2%92%8Al%5BQ%5D%E3%80%91&amp;page=6">6</a>
        <a href="http://blog.zinewow.com/catalog.asp?tags=%E4%B8%AD%E5%9B%BD%E7%A6%8F%E5%88%A9%E5%BD%A9%E7%A5%A8%E5%8F%8C%E8%89%B2%E7%90%832014064%E6%9C%9F%E3%80%90%E9%AB%98%E6%89%8B2l74%E2%92%8Al%5BQ%5D%E3%80%91&amp;page=7">7</a>
        <a href="http://blog.zinewow.com/catalog.asp?tags=%E4%B8%AD%E5%9B%BD%E7%A6%8F%E5%88%A9%E5%BD%A9%E7%A5%A8%E5%8F%8C%E8%89%B2%E7%90%832014064%E6%9C%9F%E3%80%90%E9%AB%98%E6%89%8B2l74%E2%92%8Al%5BQ%5D%E3%80%91&amp;page=8">8</a>
        <a href="http://blog.zinewow.com/catalog.asp?tags=%E4%B8%AD%E5%9B%BD%E7%A6%8F%E5%88%A9%E5%BD%A9%E7%A5%A8%E5%8F%8C%E8%89%B2%E7%90%832014064%E6%9C%9F%E3%80%90%E9%AB%98%E6%89%8B2l74%E2%92%8Al%5BQ%5D%E3%80%91&amp;page=9">9</a>
        <a href="http://blog.zinewow.com/catalog.asp?tags=%E4%B8%AD%E5%9B%BD%E7%A6%8F%E5%88%A9%E5%BD%A9%E7%A5%A8%E5%8F%8C%E8%89%B2%E7%90%832014064%E6%9C%9F%E3%80%90%E9%AB%98%E6%89%8B2l74%E2%92%8Al%5BQ%5D%E3%80%91&amp;page=10">10</a>
        <a href="http://blog.zinewow.com/catalog.asp?tags=%E4%B8%AD%E5%9B%BD%E7%A6%8F%E5%88%A9%E5%BD%A9%E7%A5%A8%E5%8F%8C%E8%89%B2%E7%90%832014064%E6%9C%9F%E3%80%90%E9%AB%98%E6%89%8B2l74%E2%92%8Al%5BQ%5D%E3%80%91&amp;page=11">11</a>
        <a href="http://blog.zinewow.com/catalog.asp?tags=%E4%B8%AD%E5%9B%BD%E7%A6%8F%E5%88%A9%E5%BD%A9%E7%A5%A8%E5%8F%8C%E8%89%B2%E7%90%832014064%E6%9C%9F%E3%80%90%E9%AB%98%E6%89%8B2l74%E2%92%8Al%5BQ%5D%E3%80%91&amp;page=12">12</a>
        <a href="http://blog.zinewow.com/catalog.asp?tags=%E4%B8%AD%E5%9B%BD%E7%A6%8F%E5%88%A9%E5%BD%A9%E7%A5%A8%E5%8F%8C%E8%89%B2%E7%90%832014064%E6%9C%9F%E3%80%90%E9%AB%98%E6%89%8B2l74%E2%92%8Al%5BQ%5D%E3%80%91&amp;page=13">13</a>
        <a href="http://blog.zinewow.com/catalog.asp?tags=%E4%B8%AD%E5%9B%BD%E7%A6%8F%E5%88%A9%E5%BD%A9%E7%A5%A8%E5%8F%8C%E8%89%B2%E7%90%832014064%E6%9C%9F%E3%80%90%E9%AB%98%E6%89%8B2l74%E2%92%8Al%5BQ%5D%E3%80%91&amp;page=14">14</a>
        <a href="http://blog.zinewow.com/catalog.asp?tags=%E4%B8%AD%E5%9B%BD%E7%A6%8F%E5%88%A9%E5%BD%A9%E7%A5%A8%E5%8F%8C%E8%89%B2%E7%90%832014064%E6%9C%9F%E3%80%90%E9%AB%98%E6%89%8B2l74%E2%92%8Al%5BQ%5D%E3%80%91&amp;page=15">15</a>
        <a href="http://blog.zinewow.com/catalog.asp?tags=%E4%B8%AD%E5%9B%BD%E7%A6%8F%E5%88%A9%E5%BD%A9%E7%A5%A8%E5%8F%8C%E8%89%B2%E7%90%832014064%E6%9C%9F%E3%80%90%E9%AB%98%E6%89%8B2l74%E2%92%8Al%5BQ%5D%E3%80%91&amp;page=16">16</a>
        <a href="http://blog.zinewow.com/catalog.asp?tags=%E4%B8%AD%E5%9B%BD%E7%A6%8F%E5%88%A9%E5%BD%A9%E7%A5%A8%E5%8F%8C%E8%89%B2%E7%90%832014064%E6%9C%9F%E3%80%90%E9%AB%98%E6%89%8B2l74%E2%92%8Al%5BQ%5D%E3%80%91&amp;page=73">&raquo;</a>
       </div> 
       <div class="clear"></div> 
       <div class="bottom"></div>
      </div>
     </div> 
     <!--End Left--> 
     <!--Right--> 
     <div id="sidebar" class="l"> 
      <!--Sidebar Calendar--> 
      <!--<div id="divCalendar" class="sidebar">
<div class="clear"></div>
<div><div class="year2017 month2"><p class="y"><a href="http://blog.zinewow.com/catalog.asp?date=2017-1">&lt;&lt;</a>  <a href="http://blog.zinewow.com/catalog.asp?date=2017-2">2017-2</a>  <a href="http://blog.zinewow.com/catalog.asp?date=2017-3">&gt;&gt;</a></p><p class="w">Sun</p><p class="w">Mon</p><p class="w">Tue</p><p class="w">Wed</p><p class="w">Thu</p><p class="w">Fri</p><p class="w">Sat</p><p class="nd"></p><p class="nd"></p><p class="nd"></p><p id="pCalendar_2017_2_1" class="yd"><a class="l" href="http://blog.zinewow.com/catalog.asp?date=2017-2-1">1</a></p><p id="pCalendar_2017_2_2" class="yd"><a class="l" href="http://blog.zinewow.com/catalog.asp?date=2017-2-2">2</a></p><p id="pCalendar_2017_2_3" class="yd"><a class="l" href="http://blog.zinewow.com/catalog.asp?date=2017-2-3">3</a></p><p id="pCalendar_2017_2_4" class="yd"><a class="l" href="http://blog.zinewow.com/catalog.asp?date=2017-2-4">4</a></p><p id="pCalendar_2017_2_5" class="d">5</p><p id="pCalendar_2017_2_6" class="d">6</p><p id="pCalendar_2017_2_7" class="d">7</p><p id="pCalendar_2017_2_8" class="d">8</p><p id="pCalendar_2017_2_9" class="d">9</p><p id="pCalendar_2017_2_10" class="d">10</p><p id="pCalendar_2017_2_11" class="d">11</p><p id="pCalendar_2017_2_12" class="d">12</p><p id="pCalendar_2017_2_13" class="d">13</p><p id="pCalendar_2017_2_14" class="d">14</p><p id="pCalendar_2017_2_15" class="d">15</p><p id="pCalendar_2017_2_16" class="d">16</p><p id="pCalendar_2017_2_17" class="d">17</p><p id="pCalendar_2017_2_18" class="d">18</p><p id="pCalendar_2017_2_19" class="d">19</p><p id="pCalendar_2017_2_20" class="d">20</p><p id="pCalendar_2017_2_21" class="d">21</p><p id="pCalendar_2017_2_22" class="d">22</p><p id="pCalendar_2017_2_23" class="d">23</p><p id="pCalendar_2017_2_24" class="d">24</p><p id="pCalendar_2017_2_25" class="d">25</p><p id="pCalendar_2017_2_26" class="d">26</p><p id="pCalendar_2017_2_27" class="d">27</p><p id="pCalendar_2017_2_28" class="d">28</p><p class="nd"></p><p class="nd"></p><p class="nd"></p><p class="nd"></p></div></div>
<div class="clear"></div>
</div>--> 
      <!--End Sidebar Calendar--> 
      <!--TabAjax--> 
      <div class="boxajax"> 
       <ul id="tabMenu"> 
        <li class="NewsArtTab selected"></li> 
        <li class="HotArtTab"></li> 
        <li class="DesignArtTab"></li> 
        <li class="CommentsTab"></li> 
        <li class="TagsTab"></li> 
       </ul> 
       <div class="boxTop"></div> 
       <!--TabCentont--> 
       <div class="boxBody"> 
        <div id="NewsArtTab" class="show">
         <ul> 
          <li><a href="http://blog.zinewow.com/post/746.html" title="[2017-2-4 16:3:38] 关于 Feathers 皮肤外观、子组件相关的旧资料备注">关于 Feathers 皮肤外观、子组件相关...</a></li>
          <li><a href="http://blog.zinewow.com/post/745.html" title="[2017-2-4 9:40:46] Feathers 3.1 “升级指南”一些备注">Feathers 3.1 “升级指南”一些备注</a></li>
          <li><a href="http://blog.zinewow.com/post/744.html" title="[2017-2-3 18:43:49] Feathers 3.0 “升级指南：重复的常量”一些备注">Feathers 3.0 “升级指南：重复的常量...</a></li>
          <li><a href="http://blog.zinewow.com/post/743.html" title="[2017-2-3 17:45:37] Feathers 3.0 “升级指南：多种分辨率开发”一些备注">Feathers 3.0 “升级指南：多种分辨率...</a></li>
          <li><a href="http://blog.zinewow.com/post/742.html" title="[2017-2-3 16:58:37] Feathers 3.0 “升级指南：返回类型 API 更改”一些备注">Feathers 3.0 “升级指南：返回类型 ...</a></li>
          <li><a href="http://blog.zinewow.com/post/741.html" title="[2017-2-3 16:41:24] Feathers 3.0 “升级指南：关于尺寸测量”一些备注">Feathers 3.0 “升级指南：关于尺寸测...</a></li>
          <li><a href="http://blog.zinewow.com/post/740.html" title="[2017-2-3 15:6:20] Feathers 3.0 “升级指南：皮肤方面的更改（4）”一些备注">Feathers 3.0 “升级指南：皮肤方面的...</a></li>
          <li><a href="http://blog.zinewow.com/post/739.html" title="[2017-2-3 14:29:33] Feathers 3.0 “升级指南：皮肤方面的更改（3）”一些备注">Feathers 3.0 “升级指南：皮肤方面的...</a></li>
          <li><a href="http://blog.zinewow.com/post/738.html" title="[2017-2-3 14:25:30] Feathers 3.0 “升级指南：皮肤方面的更改（2）”一些备注">Feathers 3.0 “升级指南：皮肤方面的...</a></li>
          <li><a href="http://blog.zinewow.com/post/737.html" title="[2017-2-2 20:31:54] Feathers 3.0 “升级指南：皮肤方面的更改（1）”一些备注">Feathers 3.0 “升级指南：皮肤方面的...</a></li>
          <li><a href="http://blog.zinewow.com/post/736.html" title="[2017-2-2 20:22:17] Feathers 示例主题的原始设计资源">Feathers 示例主题的原始设计资源</a></li>
          <li><a href="http://blog.zinewow.com/post/735.html" title="[2017-2-2 19:13:14] Feathers “主题文件从1.x 版本升级到 2.x 版本”一些备注">Feathers “主题文件从1.x 版本升级...</a></li>
          <li><a href="http://blog.zinewow.com/post/734.html" title="[2017-2-2 17:40:42] Feathers3 深入了解“在主题文件中管理资源”一些备注">Feathers3 深入了解“在主题文件中管...</a></li>
          <li><a href="http://blog.zinewow.com/post/733.html" title="[2017-2-2 13:56:56] Feathers3 “深入了解样式提供程序”的一些备注">Feathers3 “深入了解样式提供程序”...</a></li>
         </ul>
        </div> 
        <div id="HotArtTab">
         <ul> 
          <li><a href="http://blog.zinewow.com/post/745.html" title="[2017-2-4 9:40:46] Feathers 3.1 “升级指南”一些备注">Feathers 3.1 “升级指南”一些备注</a></li>
          <li><a href="http://blog.zinewow.com/post/746.html" title="[2017-2-4 16:3:38] 关于 Feathers 皮肤外观、子组件相关的旧资料备注">关于 Feathers 皮肤外观、子组件相关...</a></li>
          <li><a href="http://blog.zinewow.com/post/730.html" title="[2017-2-1 18:23:11] Feathers3 “扩展示例主题”一些备注">Feathers3 “扩展示例主题”一些备注...</a></li>
          <li><a href="http://blog.zinewow.com/post/741.html" title="[2017-2-3 16:41:24] Feathers 3.0 “升级指南：关于尺寸测量”一些备注">Feathers 3.0 “升级指南：关于尺寸测...</a></li>
          <li><a href="http://blog.zinewow.com/post/740.html" title="[2017-2-3 15:6:20] Feathers 3.0 “升级指南：皮肤方面的更改（4）”一些备注">Feathers 3.0 “升级指南：皮肤方面的...</a></li>
          <li><a href="http://blog.zinewow.com/post/732.html" title="[2017-2-2 11:35:17] Feathers3 “创建自定义主题”一些备注">Feathers3 “创建自定义主题”一些备...</a></li>
          <li><a href="http://blog.zinewow.com/post/738.html" title="[2017-2-3 14:25:30] Feathers 3.0 “升级指南：皮肤方面的更改（2）”一些备注">Feathers 3.0 “升级指南：皮肤方面的...</a></li>
          <li><a href="http://blog.zinewow.com/post/734.html" title="[2017-2-2 17:40:42] Feathers3 深入了解“在主题文件中管理资源”一些备注">Feathers3 深入了解“在主题文件中管...</a></li>
          <li><a href="http://blog.zinewow.com/post/733.html" title="[2017-2-2 13:56:56] Feathers3 “深入了解样式提供程序”的一些备注">Feathers3 “深入了解样式提供程序”...</a></li>
          <li><a href="http://blog.zinewow.com/post/744.html" title="[2017-2-3 18:43:49] Feathers 3.0 “升级指南：重复的常量”一些备注">Feathers 3.0 “升级指南：重复的常量...</a></li>
         </ul>
        </div> 
        <div id="DesignArtTab">
         <ul> 
          <li><a href="http://blog.zinewow.com/post/5.html" title="[2008-8-10 1:32:32] Photoshop图层批量重命名功能（不支持批量文件，CS2版本以下有效）ImageReady的强势">Photoshop图层批量重命名功能（不支...</a></li>
          <li><a href="http://blog.zinewow.com/post/101.html" title="[2012-1-17 8:54:34] Flex 列表类组件项编辑器与项渲染器的值引用">Flex 列表类组件项编辑器与项渲染器...</a></li>
          <li><a href="http://blog.zinewow.com/post/257.html" title="[2014-1-13 22:13:33] 小时候最爱的机器人科幻动画片《太空堡垒》">小时候最爱的机器人科幻动画片《太空...</a></li>
          <li><a href="http://blog.zinewow.com/post/265.html" title="[2014-1-25 12:54:50] Adobe AIR  SDK 4.0 新的 AOT 编译模式会出现的 Bug">Adobe AIR SDK 4.0 新的 AOT 编译...</a></li>
          <li><a href="http://blog.zinewow.com/post/274.html" title="[2014-2-22 23:19:13] 一个 default xml namespace 命令引发的运行时错误">一个 default xml namespace 命令引...</a></li>
          <li><a href="http://blog.zinewow.com/post/287.html" title="[2014-3-6 22:57:32] 但是你回答我，没有爱情，故事怎么以幸福结尾――《来自星星的你》">但是你回答我，没有爱情，故事怎么以...</a></li>
          <li><a href="http://blog.zinewow.com/post/368.html" title="[2014-8-7 22:47:39] Flex  HTTPService 通过 JSON 格式的字符串与 JAVA 后台后通信">Flex HTTPService 通过 JSON 格式...</a></li>
          <li><a href="http://blog.zinewow.com/post/455.html" title="[2015-2-3 11:9:40] 将恐惧化为勇气：《鸣梁海战》">将恐惧化为勇气：《鸣梁海战》</a></li>
          <li><a href="http://blog.zinewow.com/post/479.html" title="[2015-3-22 8:17:21] iOS APP 启动画面 / 闪屏 PS 尺寸图批量生成脚本">iOS APP 启动画面 / 闪屏 PS 尺寸图...</a></li>
          <li><a href="http://blog.zinewow.com/post/517.html" title="[2015-5-8 7:34:45] Nape：碰撞检测时移除刚体">Nape：碰撞检测时移除刚体</a></li>
         </ul>
        </div> 
        <div id="CommentsTab">
         <ul>
          <li><a href="http://blog.zinewow.com/post/220.html#cmt1051" title="2016-8-18 2:02:54 post by 古树悬叶">测试了在 MAC 机中使用第二种方法，...</a></li>
          <li><a href="http://blog.zinewow.com/post/596.html#cmt1043" title="2016-5-27 21:54:40 post by 古树悬叶">《How to build and use x86 ANE AI...</a></li>
          <li><a href="http://blog.zinewow.com/post/103.html#cmt975" title="2016-4-18 11:24:22 post by 古树悬叶">//先判断一下扩展名是否存在以及是...</a></li>
          <li><a href="http://blog.zinewow.com/post/623.html#cmt709" title="2016-2-21 17:33:28 post by 古树悬叶">Adobe 官方 Game SDK 的 API 手册链...</a></li>
          <li><a href="http://blog.zinewow.com/post/616.html#cmt643" title="2016-1-16 11:43:53 post by 古树悬叶">其它参数资料链接：http://help.ado...</a></li>
          <li><a href="http://blog.zinewow.com/post/192.html#cmt531" title="2015-12-16 13:18:39 post by Untitled">-t 是持续时间(duration)，并非结束...</a></li>
          <li><a href="http://blog.zinewow.com/post/539.html#cmt251" title="2015-11-9 11:23:42 post by 古树悬叶">package{ public class ScreenJS...</a></li>
          <li><a href="http://blog.zinewow.com/post/596.html#cmt241" title="2015-10-19 22:47:27 post by 我是小刀">评论惯例: 受教了！</a></li>
          <li><a href="http://blog.zinewow.com/post/583.html#cmt190" title="2015-10-9 11:00:14 post by 古树悬叶">http://stackoverflow.com/questio...</a></li>
          <li><a href="http://blog.zinewow.com/post/553.html#cmt127" title="2015-9-16 4:02:23 post by 古树悬叶">其它英文相关的视频资料：http://ww...</a></li>
         </ul>
        </div> 
        <div id="TagsTab">
         <ul>
          <li><a href="http://blog.zinewow.com/guestbook.asp#cmt10" title="2012-1-4 11:52:32 post by 你好">呵呵，兄弟你好，我看到http://bbs.b...</a></li>
          <li><a href="http://blog.zinewow.com/guestbook.asp#cmt8" title="2011-10-31 11:52:24 post by savinxu">大神，看到您在蓝色理想论坛发的帖子...</a></li>
         </ul>
        </div> 
       </div> 
       <!--End TabCentont--> 
       <div class="boxBottom"></div> 
       <div class="clear"></div> 
      </div> 
      <!--End TabAjax--> 
      <!--Sidebar Catalog--> 
      <div id="divCatalog" class="sidebar"> 
       <h4 class="sidetitle">
        <div class="shadow"></div><a>Log Categories </a></h4> 
       <ul> 
        <li><span class="feed-icon"><a href="http://blog.zinewow.com/feed.asp?cate=2" target="_blank"><img title="rss" width="20" height="12" src="http://blog.zinewow.com/IMAGE/LOGO/rss.png" border="0" alt="rss" /></a>&nbsp;</span><a href="http://blog.zinewow.com/catalog.asp?cate=2">Flash Platform<span class="article-nums"> (468)</span></a></li>
        <li><span class="feed-icon"><a href="http://blog.zinewow.com/feed.asp?cate=8" target="_blank"><img title="rss" width="20" height="12" src="http://blog.zinewow.com/IMAGE/LOGO/rss.png" border="0" alt="rss" /></a>&nbsp;</span><a href="http://blog.zinewow.com/catalog.asp?cate=8">Photoshop! WOW<span class="article-nums"> (13)</span></a></li>
        <li><span class="feed-icon"><a href="http://blog.zinewow.com/feed.asp?cate=5" target="_blank"><img title="rss" width="20" height="12" src="http://blog.zinewow.com/IMAGE/LOGO/rss.png" border="0" alt="rss" /></a>&nbsp;</span><a href="http://blog.zinewow.com/catalog.asp?cate=5">Swift<span class="article-nums"> (8)</span></a></li>
        <li><span class="feed-icon"><a href="http://blog.zinewow.com/feed.asp?cate=14" target="_blank"><img title="rss" width="20" height="12" src="http://blog.zinewow.com/IMAGE/LOGO/rss.png" border="0" alt="rss" /></a>&nbsp;</span><a href="http://blog.zinewow.com/catalog.asp?cate=14">Objective-C<span class="article-nums"> (6)</span></a></li>
        <li><span class="feed-icon"><a href="http://blog.zinewow.com/feed.asp?cate=10" target="_blank"><img title="rss" width="20" height="12" src="http://blog.zinewow.com/IMAGE/LOGO/rss.png" border="0" alt="rss" /></a>&nbsp;</span><a href="http://blog.zinewow.com/catalog.asp?cate=10">Java<span class="article-nums"> (8)</span></a></li>
        <li><span class="feed-icon"><a href="http://blog.zinewow.com/feed.asp?cate=7" target="_blank"><img title="rss" width="20" height="12" src="http://blog.zinewow.com/IMAGE/LOGO/rss.png" border="0" alt="rss" /></a>&nbsp;</span><a href="http://blog.zinewow.com/catalog.asp?cate=7">JavaScript<span class="article-nums"> (5)</span></a></li>
        <li><span class="feed-icon"><a href="http://blog.zinewow.com/feed.asp?cate=6" target="_blank"><img title="rss" width="20" height="12" src="http://blog.zinewow.com/IMAGE/LOGO/rss.png" border="0" alt="rss" /></a>&nbsp;</span><a href="http://blog.zinewow.com/catalog.asp?cate=6">HTML,CSS<span class="article-nums"> (5)</span></a></li>
        <li><span class="feed-icon"><a href="http://blog.zinewow.com/feed.asp?cate=11" target="_blank"><img title="rss" width="20" height="12" src="http://blog.zinewow.com/IMAGE/LOGO/rss.png" border="0" alt="rss" /></a>&nbsp;</span><a href="http://blog.zinewow.com/catalog.asp?cate=11">Access<span class="article-nums"> (2)</span></a></li>
        <li><span class="feed-icon"><a href="http://blog.zinewow.com/feed.asp?cate=3" target="_blank"><img title="rss" width="20" height="12" src="http://blog.zinewow.com/IMAGE/LOGO/rss.png" border="0" alt="rss" /></a>&nbsp;</span><a href="http://blog.zinewow.com/catalog.asp?cate=3">Miscellaneous<span class="article-nums"> (114)</span></a></li>
        <li><span class="feed-icon"><a href="http://blog.zinewow.com/feed.asp?cate=1" target="_blank"><img title="rss" width="20" height="12" src="http://blog.zinewow.com/IMAGE/LOGO/rss.png" border="0" alt="rss" /></a>&nbsp;</span><a href="http://blog.zinewow.com/catalog.asp?cate=1">Stories<span class="article-nums"> (19)</span></a></li>
        <li><span class="feed-icon"><a href="http://blog.zinewow.com/feed.asp?cate=4" target="_blank"><img title="rss" width="20" height="12" src="http://blog.zinewow.com/IMAGE/LOGO/rss.png" border="0" alt="rss" /></a>&nbsp;</span><a href="http://blog.zinewow.com/catalog.asp?cate=4">Movies, TV and Celebrities<span class="article-nums"> (44)</span></a></li>
        <li><span class="feed-icon"><a href="http://blog.zinewow.com/feed.asp?cate=13" target="_blank"><img title="rss" width="20" height="12" src="http://blog.zinewow.com/IMAGE/LOGO/rss.png" border="0" alt="rss" /></a>&nbsp;</span><a href="http://blog.zinewow.com/catalog.asp?cate=13">ADs<span class="article-nums"> (5)</span></a></li>
        <li><span class="feed-icon"><a href="http://blog.zinewow.com/feed.asp?cate=12" target="_blank"><img title="rss" width="20" height="12" src="http://blog.zinewow.com/IMAGE/LOGO/rss.png" border="0" alt="rss" /></a>&nbsp;</span><a href="http://blog.zinewow.com/catalog.asp?cate=12">Babblings<span class="article-nums"> (7)</span></a></li>
        <li><span class="feed-icon"><a href="http://blog.zinewow.com/feed.asp?cate=15" target="_blank"><img title="rss" width="20" height="12" src="http://blog.zinewow.com/IMAGE/LOGO/rss.png" border="0" alt="rss" /></a>&nbsp;</span><a href="http://blog.zinewow.com/catalog.asp?cate=15">Harmonica<span class="article-nums"> (21)</span></a></li> 
       </ul> 
       <div class="clear"></div> 
      </div> 
      <!--End Sidebar Catalog--> 
      <!--Sidebar Archives--> 
      <div id="divArchives" class="sidebar"> 
       <h4 class="sidetitle">
        <div class="shadow"></div><a>Article Archive</a></h4> 
       <ul>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2017-2">2017 FEB<span class="article-nums"> (20)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2017-1">2017 JAN<span class="article-nums"> (60)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2016-12">2016 DEC<span class="article-nums"> (4)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2016-11">2016 NOV<span class="article-nums"> (5)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2016-10">2016 OCT<span class="article-nums"> (10)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2016-9">2016 SEP<span class="article-nums"> (1)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2016-8">2016 AUG<span class="article-nums"> (6)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2016-7">2016 JUL<span class="article-nums"> (1)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2016-6">2016 JUN<span class="article-nums"> (1)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2016-4">2016 APR<span class="article-nums"> (7)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2016-3">2016 MAR<span class="article-nums"> (2)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2016-2">2016 FEB<span class="article-nums"> (6)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2016-1">2016 JAN<span class="article-nums"> (5)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2015-12">2015 DEC<span class="article-nums"> (5)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2015-11">2015 NOV<span class="article-nums"> (7)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2015-10">2015 OCT<span class="article-nums"> (25)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2015-9">2015 SEP<span class="article-nums"> (17)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2015-8">2015 AUG<span class="article-nums"> (5)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2015-7">2015 JUL<span class="article-nums"> (11)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2015-6">2015 JUN<span class="article-nums"> (15)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2015-5">2015 MAY<span class="article-nums"> (12)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2015-4">2015 APR<span class="article-nums"> (28)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2015-3">2015 MAR<span class="article-nums"> (12)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2015-2">2015 FEB<span class="article-nums"> (16)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2015-1">2015 JAN<span class="article-nums"> (8)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2014-12">2014 DEC<span class="article-nums"> (5)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2014-11">2014 NOV<span class="article-nums"> (32)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2014-10">2014 OCT<span class="article-nums"> (17)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2014-9">2014 SEP<span class="article-nums"> (7)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2014-8">2014 AUG<span class="article-nums"> (20)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2014-7">2014 JUL<span class="article-nums"> (4)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2014-6">2014 JUN<span class="article-nums"> (7)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2014-5">2014 MAY<span class="article-nums"> (28)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2014-4">2014 APR<span class="article-nums"> (14)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2014-3">2014 MAR<span class="article-nums"> (22)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2014-2">2014 FEB<span class="article-nums"> (16)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2014-1">2014 JAN<span class="article-nums"> (20)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2013-12">2013 DEC<span class="article-nums"> (24)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2013-11">2013 NOV<span class="article-nums"> (4)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2013-10">2013 OCT<span class="article-nums"> (2)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2013-9">2013 SEP<span class="article-nums"> (3)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2013-8">2013 AUG<span class="article-nums"> (5)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2013-7">2013 JUL<span class="article-nums"> (11)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2013-6">2013 JUN<span class="article-nums"> (2)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2013-5">2013 MAY<span class="article-nums"> (5)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2013-4">2013 APR<span class="article-nums"> (1)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2013-3">2013 MAR<span class="article-nums"> (4)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2013-1">2013 JAN<span class="article-nums"> (2)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2012-11">2012 NOV<span class="article-nums"> (2)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2012-9">2012 SEP<span class="article-nums"> (1)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2012-8">2012 AUG<span class="article-nums"> (3)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2012-7">2012 JUL<span class="article-nums"> (26)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2012-6">2012 JUN<span class="article-nums"> (33)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2012-5">2012 MAY<span class="article-nums"> (1)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2012-4">2012 APR<span class="article-nums"> (3)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2012-3">2012 MAR<span class="article-nums"> (9)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2012-2">2012 FEB<span class="article-nums"> (3)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2012-1">2012 JAN<span class="article-nums"> (11)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2011-12">2011 DEC<span class="article-nums"> (6)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2011-11">2011 NOV<span class="article-nums"> (8)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2011-10">2011 OCT<span class="article-nums"> (7)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2011-9">2011 SEP<span class="article-nums"> (1)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2011-8">2011 AUG<span class="article-nums"> (6)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2011-7">2011 JUL<span class="article-nums"> (1)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2011-5">2011 MAY<span class="article-nums"> (5)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2011-2">2011 FEB<span class="article-nums"> (1)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2011-1">2011 JAN<span class="article-nums"> (3)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2010-9">2010 SEP<span class="article-nums"> (2)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2010-8">2010 AUG<span class="article-nums"> (2)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2010-4">2010 APR<span class="article-nums"> (2)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2010-3">2010 MAR<span class="article-nums"> (4)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2010-2">2010 FEB<span class="article-nums"> (2)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2010-1">2010 JAN<span class="article-nums"> (11)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2009-12">2009 DEC<span class="article-nums"> (2)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2009-11">2009 NOV<span class="article-nums"> (1)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2009-9">2009 SEP<span class="article-nums"> (1)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2009-8">2009 AUG<span class="article-nums"> (1)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2009-7">2009 JUL<span class="article-nums"> (1)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2009-6">2009 JUN<span class="article-nums"> (1)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2009-5">2009 MAY<span class="article-nums"> (5)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2009-4">2009 APR<span class="article-nums"> (4)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2009-3">2009 MAR<span class="article-nums"> (1)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2009-2">2009 FEB<span class="article-nums"> (3)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2009-1">2009 JAN<span class="article-nums"> (1)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2008-9">2008 SEP<span class="article-nums"> (1)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2008-8">2008 AUG<span class="article-nums"> (3)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2008-7">2008 JUL<span class="article-nums"> (1)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2008-4">2008 APR<span class="article-nums"> (1)</span></a></li>
        <li><a href="http://blog.zinewow.com/catalog.asp?date=2008-3">2008 MAR<span class="article-nums"> (1)</span></a></li>
       </ul> 
       <div class="clear"></div> 
      </div> 
      <!--End Sidebar Archives--> 
      <!--Sidebar Linkage--> 
      <div id="divLinkage" class="sidebar"> 
       <h4 class="sidetitle">
        <div class="shadow"></div><a>Interactive links</a></h4> 
       <ul>
        <li><a href="http://www.cnblogs.com/sandal1980" target="_blank" title="老镇-博客">老镇-博客</a></li> 
        <li><a href="http://zengrong.net/" target="_blank" title="可能是一个程序员">zrong's Blog</a></li>
       </ul> 
       <div class="clear"></div> 
      </div> 
      <!--End Sidebar Linkage--> 
      <!--Sidebar Favorites--> 
      <div id="divFavorites" class="sidebar"> 
       <h4 class="sidetitle">
        <div class="shadow"></div><a>Site Favorites</a></h4> 
       <ul>
        <li><a href="http://www.adobe.com/cn/devnet/" target="_blank">Adobe 开发者中心</a></li> 
        <li><a href="http://airexamples.com/" target="_blank">AIR Examples</a></li> 
        <li><a href="http://blog.flexexamples.com/" target="_blank">Flex Examples</a></li> 
        <li><a href="http://www.fairygui.com/" target="_blank">FairyGUI</a></li> 
        <li><a href="http://xyliu.sinaapp.com/" target="_blank">StarlingSWF</a></li> 
        <li><a href="http://www.dafont.com/" target="_blank">英文字体网</a></li> 
        <li><a href="http://font.knowsky.com/" target="_blank">中文字体网</a></li> 
        <li><a href="http://www.webkaka.com/" target="_blank">卡卡测速网</a></li> 
        <li><a href="http://icondrawer.com/free.php" target="_blank">Free Icons</a></li> 
        <li><a href="http://www.w3school.com.cn/" target="_blank">w3school</a></li> 
        <li><a href="http://www.who.is/" target="_blank">Whois 查询</a></li> 
        <li><a href="http://www.swiftguide.cn/" target="_blank">Swift 开发中文版</a></li> 
        <li><a href="http://msdn.itellyou.cn/" target="_blank">MSDN，我告诉你</a></li> 
        <li><a href="http://blogs.adobe.com/flashplayer/" target="_blank">Adobe Flash 平台官方博客</a></li> 
        <li><a href="http://www.ladeng6666.com/blog/category/nape/" target="_blank" title="拉登大叔的博客">Nape 中文资料</a></li> 
        <li><a href="https://support.google.com/admob" target="_blank" title="AdMob">AdMob 帮助中心</a></li> 
        <li><a href="http://wiki.starling-framework.org/extensions/start" target="_blank" title="Starling 扩展">Starling 扩展类库</a></li> 
        <li><a href="http://www.cuo.so/ane-list/index.html" target="_blank" title="ANE For AIR">AIR 开发常用 ANE</a></li>
       </ul> 
       <div class="clear"></div> 
      </div> 
      <!--End Sidebar Favorites--> 
     </div> 
     <!--End Right--> 
    </div> 
    <div class="clear"></div> 
    <!--End Container--> 
    <!--Footer--> 
    <div id="footer"> 
     <div id="bottomnav">
      <div id="footernav"> 
       <ul class="l">
        <li><a href="http://blog.zinewow.com/">Index</a></li> 
        <li><a href="/tags.asp">TagCloud</a></li> 
        <li><a href="/guestbook.asp">GuestBook</a></li> 
        <li><a href="/cmd.asp?act=login">Admin</a></li>
       </ul> 
       <ul class="r"> 
       </ul> 
       <div class="clear"></div> 
      </div>
     </div> 
     <div id="bottomcontent">
      <div id="footercontent"> 
       <div id="statistics" class="footerbox1 l"> 
        <h3>站点统计</h3> 
        <ul>
         <li>文章总数:728</li>
         <li>评论总数:87</li>
         <li>引用总数:0</li>
         <li>浏览总数:105052</li>
         <li>留言总数:2</li>
        </ul> 
       </div> 
       <div id="aboutheme" class="footerbox2 l"> 
        <h3>About The Theme</h3> 
        <p style="text-indent: 1.7em;">本站支持以下核心的浏览器：（推荐使用IE8.0或Google Chrome）。</p> 
        <p>　</p> 
        <div class="browsericon">
         <img src="http://blog.zinewow.com/themes/EasyBule/STYLE/EasyBule/eb_browser_icon.png" width="300" height="46" />
        </div>
       </div> 
       <div class="footerbox3 l"> 
        <a class="footerlogobox l"></a>
        <h3>About Blog</h3> 
        <p>平淡无奇的生活在城市某个角落，体会幸福与感动；体会无奈与心痛。风吹过的每一个地方，记载着不断成熟或衰老的每一个脚印。</p> 
        <p style="text-align:right">By ZineWow</p> 
       </div> 
       <div class="clear"></div> 
      </div>
     </div> 
     <div id="copyright">
      Copyright 2008-2014 博客文章仅供学习与参考，如有转载请保留出处（
      <a href="http://www.zinewow.com/">www.zinewow.com</a>） 浙ICP备12030169号　
      <script type="text/javascript">var _bdhmProtocol = (("https:" == document.location.protocol) ? " https://" : " http://");document.write(unescape("%3Cscript src='" + _bdhmProtocol + "hm.baidu.com/h.js%3F73b62259100b2b6a113d0da9d1c50e5e' type='text/javascript'%3E%3C/script%3E"));</script>　本博客程序基于 
      <a href="http://www.zblogcn.com/"> Z-Blog </a>
     </div> 
    </div> 
    <!--End Footer--> 
   </div>
  </div> 
  <script language="JavaScript" type="text/javascript">
$(document).ready(function(){ 

try{
	var elScript = document.createElement("script");
	elScript.setAttribute("language", "JavaScript");
	elScript.setAttribute("src", "http://blog.zinewow.com/function/c_html_js.asp?act=batch"+unescape("%26")+"view=" + escape(strBatchView)+unescape("%26")+"inculde=" + escape(strBatchInculde)+unescape("%26")+"count=" + escape(strBatchCount));
	document.getElementsByTagName("body")[0].appendChild(elScript);
	}
catch(e){};

});
</script> 
  <script language="JavaScript" type="text/javascript">$(document).ready(function(){$("p.read-more a").html("\u003Cstrong style=\"font-size:12px;\"\u003E阅读全文……\u003C/strong\u003E")});</script> 
  <!-- 607ms -->
 </body>
</html>